/**
 * \file IfxScr_regdef.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC3XXSCR_UM_V1.4.0.R0
 * Specification: TC3xx User Manual V1.4.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scr_Registers Scr Registers
 * \ingroup IfxSfr
 * 
 * \defgroup IfxSfr_Scr_Registers_Bitfields Bitfields
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_union Register unions
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_struct Memory map
 * \ingroup IfxSfr_Scr_Registers
 */
#ifndef IFXSCR_REGDEF_H
#define IFXSCR_REGDEF_H 1
/******************************************************************************/
#include "Ifx_TypesReg.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

/******************************************************************************/
#if defined (__TASKING__)
#pragma warning 586
#endif
/******************************************************************************/

/** \addtogroup IfxSfr_Scr_Registers_Bitfields
 * \{  */
/** \brief Accumulator */
typedef struct _Ifx_SCR_ACC_Bits
{
    Ifx_UReg_8Bit ACC:8;              /**< \brief [7:0] Accumulator Value (rwh) */
} Ifx_SCR_ACC_Bits;

/** \brief ADCOMP Control Register */
typedef struct _Ifx_SCR_ADCOMP_CON_Bits
{
    Ifx_UReg_8Bit ADCENREQ:1;         /**< \brief [0:0] ADC Comparator Enable Request (rw) */
    Ifx_UReg_8Bit ADCEN:1;            /**< \brief [1:1] ADC Comparator Enable Status (rh) */
    Ifx_UReg_8Bit ADCIEN:1;           /**< \brief [2:2] ADC Comparator Interrupt Enable (rw) */
    Ifx_UReg_8Bit ADCCHSEL:2;         /**< \brief [4:3] ADC Channel Select (rw) */
    Ifx_UReg_8Bit VF:1;               /**< \brief [5:5] ADC Valid Flag for Result Register (rh) */
    Ifx_UReg_8Bit EOCSAMPLE:1;        /**< \brief [6:6] ADC End of Conversion / Sampling Indication (rh) */
    Ifx_UReg_8Bit SOC:1;              /**< \brief [7:7] ADC Start of Conversion Request (rwh) */
} Ifx_SCR_ADCOMP_CON_Bits;

/** \brief ADCOMP Result Register */
typedef struct _Ifx_SCR_ADCOMP_RES_Bits
{
    Ifx_UReg_8Bit ADRES:8;            /**< \brief [7:0] ADC Conversion Result (rh) */
} Ifx_SCR_ADCOMP_RES_Bits;

/** \brief B Register */
typedef struct _Ifx_SCR_B_Bits
{
    Ifx_UReg_8Bit B:8;                /**< \brief [7:0] B Register Value (rwh) */
} Ifx_SCR_B_Bits;

/** \brief DATA Control Register ${n} */
typedef struct _Ifx_SCR_DATA_CTRL_Bits
{
    Ifx_UReg_8Bit DATA:8;             /**< \brief [7:0] CAN Data Byte (rw) */
} Ifx_SCR_DATA_CTRL_Bits;

/** \brief Module Suspend Control Register */
typedef struct _Ifx_SCR_DBG_MODSUSP_Bits
{
    Ifx_UReg_8Bit WDTSUSP:1;          /**< \brief [0:0] SCU Watchdog Timer Debug Suspend Bit (rw) */
    Ifx_UReg_8Bit RTCSUSP:1;          /**< \brief [1:1] Real-Time Clock Debug Suspend Bit (rw) */
    Ifx_UReg_8Bit T2SUSP:1;           /**< \brief [2:2] Timer 2 Debug Suspend Bit (rw) */
    Ifx_UReg_8Bit CCTSUSP:1;          /**< \brief [3:3] Compare/Capture Timer (CCT) Debug Suspend Bit (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_DBG_MODSUSP_Bits;

/** \brief Data Pointer High Byte */
typedef struct _Ifx_SCR_DPH_Bits
{
    Ifx_UReg_8Bit DPH:8;              /**< \brief [7:0] Data Pointer High Byte Value (rwh) */
} Ifx_SCR_DPH_Bits;

/** \brief Data Pointer Low Byte */
typedef struct _Ifx_SCR_DPL_Bits
{
    Ifx_UReg_8Bit DPL:8;              /**< \brief [7:0] Data Pointer Low Byte Value (rwh) */
} Ifx_SCR_DPL_Bits;

/** \brief Extended Operation Register */
typedef struct _Ifx_SCR_EO_Bits
{
    Ifx_UReg_8Bit DPSEL:3;            /**< \brief [2:0] Data Pointer Select (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit TRAP_EN:1;          /**< \brief [4:4] TRAP Enable (rw) */
    Ifx_UReg_8Bit reserved_5:3;       /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_EO_Bits;

/** \brief External Interrupt Control Register 0 */
typedef struct _Ifx_SCR_EXICON0_Bits
{
    Ifx_UReg_8Bit EXINT0:2;           /**< \brief [1:0] External Interrupt 0 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT1:2;           /**< \brief [3:2] External Interrupt 1 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT2:2;           /**< \brief [5:4] External Interrupt 2 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT3:2;           /**< \brief [7:6] External Interrupt 3 Trigger Select (rw) */
} Ifx_SCR_EXICON0_Bits;

/** \brief External Interrupt Control Register 1 */
typedef struct _Ifx_SCR_EXICON1_Bits
{
    Ifx_UReg_8Bit EXINT4:2;           /**< \brief [1:0] External Interrupt 4 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT5:2;           /**< \brief [3:2] External Interrupt 5 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT6:2;           /**< \brief [5:4] External Interrupt 6 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT7:2;           /**< \brief [7:6] External Interrupt 7 Trigger Select (rw) */
} Ifx_SCR_EXICON1_Bits;

/** \brief External Interrupt Control Register 2 */
typedef struct _Ifx_SCR_EXICON2_Bits
{
    Ifx_UReg_8Bit EXINT8:2;           /**< \brief [1:0] External Interrupt 8 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT9:2;           /**< \brief [3:2] External Interrupt 9 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT10:2;          /**< \brief [5:4] External Interrupt 10 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT11:2;          /**< \brief [7:6] External Interrupt 11 Trigger Select (rw) */
} Ifx_SCR_EXICON2_Bits;

/** \brief External Interrupt Control Register 3 */
typedef struct _Ifx_SCR_EXICON3_Bits
{
    Ifx_UReg_8Bit EXINT12:2;          /**< \brief [1:0] External Interrupt 12 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT13:2;          /**< \brief [3:2] External Interrupt 13 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT14:2;          /**< \brief [5:4] External Interrupt 14 Trigger Select (rw) */
    Ifx_UReg_8Bit EXINT15:2;          /**< \brief [7:6] External Interrupt 15 Trigger Select (rw) */
} Ifx_SCR_EXICON3_Bits;

/** \brief Interrupt Enable Register 0 */
typedef struct _Ifx_SCR_IEN0_Bits
{
    Ifx_UReg_8Bit EX0:1;              /**< \brief [0:0] Interrupt Node XINTR0 Enable (rw) */
    Ifx_UReg_8Bit ET0:1;              /**< \brief [1:1] Interrupt Node XINTR1 Enable (rw) */
    Ifx_UReg_8Bit EX1:1;              /**< \brief [2:2] Interrupt Node XINTR2 Enable (rw) */
    Ifx_UReg_8Bit ET1:1;              /**< \brief [3:3] Interrupt Node XINTR3 Enable (rw) */
    Ifx_UReg_8Bit ES:1;               /**< \brief [4:4] Interrupt Node XINTR4 Enable (rw) */
    Ifx_UReg_8Bit ET2:1;              /**< \brief [5:5] Interrupt Node XINTR5 Enable (rw) */
    Ifx_UReg_8Bit reserved_6:1;       /**< \brief [6:6] \internal Reserved */
    Ifx_UReg_8Bit EA:1;               /**< \brief [7:7] Global Interrupt Mask (rw) */
} Ifx_SCR_IEN0_Bits;

/** \brief Interrupt Enable Register 1 */
typedef struct _Ifx_SCR_IEN1_Bits
{
    Ifx_UReg_8Bit EWCAN:1;            /**< \brief [0:0] Interrupt Node XINTR6 Enable (rw) */
    Ifx_UReg_8Bit ESSC:1;             /**< \brief [1:1] Interrupt Node XINTR7 Enable (rw) */
    Ifx_UReg_8Bit EX2:1;              /**< \brief [2:2] Interrupt Node XINTR8 Enable (rw) */
    Ifx_UReg_8Bit EXM:1;              /**< \brief [3:3] Interrupt Node XINTR9 Enable (rw) */
    Ifx_UReg_8Bit ECCIP0:1;           /**< \brief [4:4] Interrupt Node XINTR10 Enable (rw) */
    Ifx_UReg_8Bit ECCIP1:1;           /**< \brief [5:5] Interrupt Node XINTR11 Enable (rw) */
    Ifx_UReg_8Bit ECCIP2:1;           /**< \brief [6:6] Interrupt Node XINTR12 Enable (rw) */
    Ifx_UReg_8Bit ECCIP3:1;           /**< \brief [7:7] Interrupt Node XINTR13 Enable (rw) */
} Ifx_SCR_IEN1_Bits;

/** \brief Page Register for Port SFRs */
typedef struct _Ifx_SCR_IO_PAGE_Bits
{
    Ifx_UReg_8Bit PAGE:3;             /**< \brief [2:0] Page Bits (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit STNR:2;             /**< \brief [5:4] Storage Number (w) */
    Ifx_UReg_8Bit OP:2;               /**< \brief [7:6] Operation (w) */
} Ifx_SCR_IO_PAGE_Bits;

/** \brief Interrupt Priority Register */
typedef struct _Ifx_SCR_IP_Bits
{
    Ifx_UReg_8Bit PX0:1;              /**< \brief [0:0] Priority Level Low Bit for Interrupt Node XINTR0 (rw) */
    Ifx_UReg_8Bit PT0:1;              /**< \brief [1:1] Priority Level Low Bit for Interrupt Node XINTR1 (rw) */
    Ifx_UReg_8Bit PX1:1;              /**< \brief [2:2] Priority Level Low Bit for Interrupt Node XINTR2 (rw) */
    Ifx_UReg_8Bit PT1:1;              /**< \brief [3:3] Priority Level Low Bit for Interrupt Node XINTR3 (rw) */
    Ifx_UReg_8Bit PS:1;               /**< \brief [4:4] Priority Level Low Bit for Interrupt Node XINTR4 (rw) */
    Ifx_UReg_8Bit PT2:1;              /**< \brief [5:5] Priority Level Low Bit for Interrupt Node XINTR5 (rw) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_IP_Bits;

/** \brief Interrupt Priority 1 Register */
typedef struct _Ifx_SCR_IP1_Bits
{
    Ifx_UReg_8Bit PWCAN:1;            /**< \brief [0:0] Priority Level Low Bit for Interrupt Node XINTR6 (rw) */
    Ifx_UReg_8Bit PSSC:1;             /**< \brief [1:1] Priority Level Low Bit for Interrupt Node XINTR7 (rw) */
    Ifx_UReg_8Bit PX2:1;              /**< \brief [2:2] Priority Level Low Bit for Interrupt Node XINTR8 (rw) */
    Ifx_UReg_8Bit PXM:1;              /**< \brief [3:3] Priority Level Low Bit for Interrupt Node XINTR9 (rw) */
    Ifx_UReg_8Bit PCCIP0:1;           /**< \brief [4:4] Priority Level Low Bit for Interrupt Node XINTR10 (rw) */
    Ifx_UReg_8Bit PCCIP1:1;           /**< \brief [5:5] Priority Level Low Bit for Interrupt Node XINTR11 (rw) */
    Ifx_UReg_8Bit PCCIP2:1;           /**< \brief [6:6] Priority Level Low Bit for Interrupt Node XINTR12 (rw) */
    Ifx_UReg_8Bit PCCIP3:1;           /**< \brief [7:7] Priority Level Low Bit for Interrupt Node XINTR13 (rw) */
} Ifx_SCR_IP1_Bits;

/** \brief Interrupt Priority High Register */
typedef struct _Ifx_SCR_IPH_Bits
{
    Ifx_UReg_8Bit PX0H:1;             /**< \brief [0:0] Priority Level High Bit for Interrupt Node XINTR0 (rw) */
    Ifx_UReg_8Bit PT0H:1;             /**< \brief [1:1] Priority Level High Bit for Interrupt Node XINTR1 (rw) */
    Ifx_UReg_8Bit PX1H:1;             /**< \brief [2:2] Priority Level High Bit for Interrupt Node XINTR2 (rw) */
    Ifx_UReg_8Bit PT1H:1;             /**< \brief [3:3] Priority Level High Bit for Interrupt Node XINTR3 (rw) */
    Ifx_UReg_8Bit PSH:1;              /**< \brief [4:4] Priority Level High Bit for Interrupt Node XINTR4 (rw) */
    Ifx_UReg_8Bit PT2H:1;             /**< \brief [5:5] Priority Level High Bit for Interrupt Node XINTR5 (rw) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_IPH_Bits;

/** \brief Interrupt Priority 1 High Register */
typedef struct _Ifx_SCR_IPH1_Bits
{
    Ifx_UReg_8Bit PWCANH:1;           /**< \brief [0:0] Priority Level High Bit for Interrupt Node XINTR6 (rw) */
    Ifx_UReg_8Bit PSSCH:1;            /**< \brief [1:1] Priority Level High Bit for Interrupt Node XINTR7 (rw) */
    Ifx_UReg_8Bit PX2H:1;             /**< \brief [2:2] Priority Level High Bit for Interrupt Node XINTR8 (rw) */
    Ifx_UReg_8Bit PXMH:1;             /**< \brief [3:3] Priority Level High Bit for Interrupt Node XINTR9 (rw) */
    Ifx_UReg_8Bit PCCIP0H:1;          /**< \brief [4:4] Priority Level High Bit for Interrupt Node XINTR10 (rw) */
    Ifx_UReg_8Bit PCCIP1H:1;          /**< \brief [5:5] Priority Level High Bit for Interrupt Node XINTR11 (rw) */
    Ifx_UReg_8Bit PCCIP2H:1;          /**< \brief [6:6] Priority Level High Bit for Interrupt Node XINTR12 (rw) */
    Ifx_UReg_8Bit PCCIP3H:1;          /**< \brief [7:7] Priority Level High Bit for Interrupt Node XINTR13 (rw) */
} Ifx_SCR_IPH1_Bits;

/** \brief Interrupt Request Register 0 */
typedef struct _Ifx_SCR_IRCON0_Bits
{
    Ifx_UReg_8Bit reserved_0:2;       /**< \brief [1:0] \internal Reserved */
    Ifx_UReg_8Bit EXINT2:1;           /**< \brief [2:2] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT3:1;           /**< \brief [3:3] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT4:1;           /**< \brief [4:4] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT5:1;           /**< \brief [5:5] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT6:1;           /**< \brief [6:6] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT7:1;           /**< \brief [7:7] Interrupt Flag for External Interrupt x (rwh) */
} Ifx_SCR_IRCON0_Bits;

/** \brief Interrupt Request Register 1 */
typedef struct _Ifx_SCR_IRCON1_Bits
{
    Ifx_UReg_8Bit EIR:1;              /**< \brief [0:0] Error Interrupt Flag for SSC (rwh) */
    Ifx_UReg_8Bit TIR:1;              /**< \brief [1:1] Transmit Interrupt Flag for SSC (rwh) */
    Ifx_UReg_8Bit RIR:1;              /**< \brief [2:2] Receive Interrupt Flag for SSC (rwh) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit ADCIR:1;            /**< \brief [4:4] Interrupt Flag for ADCOMP unit (rwh) */
    Ifx_UReg_8Bit RER:1;              /**< \brief [5:5] Receive FIFO Empty Interrupt Flag for SSC (rwh) */
    Ifx_UReg_8Bit RFR:1;              /**< \brief [6:6] Receive FIFO Full Interrupt Flag for SSC (rwh) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_IRCON1_Bits;

/** \brief Interrupt Request Register 2 */
typedef struct _Ifx_SCR_IRCON2_Bits
{
    Ifx_UReg_8Bit EXINT8:1;           /**< \brief [0:0] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT9:1;           /**< \brief [1:1] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT10:1;          /**< \brief [2:2] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT11:1;          /**< \brief [3:3] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT12:1;          /**< \brief [4:4] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT13:1;          /**< \brief [5:5] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT14:1;          /**< \brief [6:6] Interrupt Flag for External Interrupt x (rwh) */
    Ifx_UReg_8Bit EXINT15:1;          /**< \brief [7:7] Interrupt Flag for External Interrupt x (rwh) */
} Ifx_SCR_IRCON2_Bits;

/** \brief Peripheral Input Select Register 0 */
typedef struct _Ifx_SCR_MODPISEL0_Bits
{
    Ifx_UReg_8Bit URRIS:4;            /**< \brief [3:0] UART Receiver Input Select (rw) */
    Ifx_UReg_8Bit WCANRXDIS:4;        /**< \brief [7:4] WCAN Receiver Input Select (rw) */
} Ifx_SCR_MODPISEL0_Bits;

/** \brief Peripheral Input Select Register 1 */
typedef struct _Ifx_SCR_MODPISEL1_Bits
{
    Ifx_UReg_8Bit reserved_0:2;       /**< \brief [1:0] \internal Reserved */
    Ifx_UReg_8Bit EXINT0IS:2;         /**< \brief [3:2] External Interrupt Input 0 Input Select (rw) */
    Ifx_UReg_8Bit EXINT1IS:2;         /**< \brief [5:4] External Interrupt Input 1 Input Select (rw) */
    Ifx_UReg_8Bit EXINT2IS:2;         /**< \brief [7:6] External Interrupt Input 2 Input Select (rw) */
} Ifx_SCR_MODPISEL1_Bits;

/** \brief Peripheral Input Select Register 2 */
typedef struct _Ifx_SCR_MODPISEL2_Bits
{
    Ifx_UReg_8Bit T2CC0EXINT3IS:2;    /**< \brief [1:0] External Interrupt 3/T2CCU Capture Channel 0 Input Select (rw) */
    Ifx_UReg_8Bit T2CC1EXINT4IS:2;    /**< \brief [3:2] External Interrupt 4/T2CCU Capture Channel 1 Input Select (rw) */
    Ifx_UReg_8Bit T2CC2EXINT5IS:2;    /**< \brief [5:4] External Interrupt 5/T2CCU Capture Channel 2 Input Select (rw) */
    Ifx_UReg_8Bit T2CC3EXINT6IS:2;    /**< \brief [7:6] External Interrupt 6/T2CCU Capture Channel 3 Input Select (rw) */
} Ifx_SCR_MODPISEL2_Bits;

/** \brief Peripheral Input Select Register 3 */
typedef struct _Ifx_SCR_MODPISEL3_Bits
{
    Ifx_UReg_8Bit T2EXIS:3;           /**< \brief [2:0] Timer 2 External Input Select (rw) */
    Ifx_UReg_8Bit T2IS:2;             /**< \brief [4:3] Timer 2 Input Select (rw) */
    Ifx_UReg_8Bit CIS:3;              /**< \brief [7:5] Slave Mode Clock Input Select (rw) */
} Ifx_SCR_MODPISEL3_Bits;

/** \brief Peripheral Input Select Register 4 */
typedef struct _Ifx_SCR_MODPISEL4_Bits
{
    Ifx_UReg_8Bit MIS:3;              /**< \brief [2:0] Master Mode Receive Input Select (rw) */
    Ifx_UReg_8Bit SIS:3;              /**< \brief [5:3] Slave Mode Receive Input Select (rw) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_MODPISEL4_Bits;

/** \brief Peripheral Input Select Register 5 */
typedef struct _Ifx_SCR_MODPISEL5_Bits
{
    Ifx_UReg_8Bit T1IS:2;             /**< \brief [1:0] Timer 1 Input Select (rw) */
    Ifx_UReg_8Bit T0IS:2;             /**< \brief [3:2] Timer 0 Input Select (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_MODPISEL5_Bits;

/** \brief NMI Control Register */
typedef struct _Ifx_SCR_NMICON_Bits
{
    Ifx_UReg_8Bit NMIWDT:1;           /**< \brief [0:0] Watchdog Timer NMI Enable (rw) */
    Ifx_UReg_8Bit NMIRAMECC:1;        /**< \brief [1:1] RAM Double bit ECC Error NMI Enable (rw) */
    Ifx_UReg_8Bit NMIEXTNMI:1;        /**< \brief [2:2] External NMI (via EXTNMI pin) NMI Enable (rw) */
    Ifx_UReg_8Bit NMIOCDS:1;          /**< \brief [3:3] OCDS NMI Enable (rw) */
    Ifx_UReg_8Bit NMIMAINC:1;         /**< \brief [4:4] Main Controller NMI Enable (rw) */
    Ifx_UReg_8Bit reserved_5:1;       /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_8Bit NMIWKP:1;           /**< \brief [6:6] Wake-Up NMI Enable (rw) */
    Ifx_UReg_8Bit SCRINTTC:1;         /**< \brief [7:7] CPUx interrupt Enable (rwh) */
} Ifx_SCR_NMICON_Bits;

/** \brief NMI Status Register */
typedef struct _Ifx_SCR_NMISR_Bits
{
    Ifx_UReg_8Bit FNMIWDT:1;          /**< \brief [0:0] Watchdog Timer NMI Flag (rwh) */
    Ifx_UReg_8Bit FNMIRAMECC:1;       /**< \brief [1:1] RAM Double bit ECC Error NMI Flag (rwh) */
    Ifx_UReg_8Bit FNMIEXTNMI:1;       /**< \brief [2:2] External NMI (via EXTNMI pin) Flag (rwh) */
    Ifx_UReg_8Bit FNMIOCDS:1;         /**< \brief [3:3] OCDS NMI Flag (rwh) */
    Ifx_UReg_8Bit FNMIMAINC:1;        /**< \brief [4:4] Main Controller NMI Flag (rwh) */
    Ifx_UReg_8Bit reserved_5:1;       /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_8Bit FNMIWKP:1;          /**< \brief [6:6] Wake-Up NMI Flag (rwh) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_NMISR_Bits;

/** \brief Password Register */
typedef struct _Ifx_SCR_PASSWD_Bits
{
    Ifx_UReg_8Bit MODE:2;             /**< \brief [1:0] Bit-Protection Scheme Control Bit (rw) */
    Ifx_UReg_8Bit PROTECT_S:1;        /**< \brief [2:2] Bit-Protection Signal Status Bit (rh) */
    Ifx_UReg_8Bit PASS:5;             /**< \brief [7:3] Password Bits (w) */
} Ifx_SCR_PASSWD_Bits;

/** \brief Power Control Register */
typedef struct _Ifx_SCR_PCON_Bits
{
    Ifx_UReg_8Bit IDLE:1;             /**< \brief [0:0] Idle Mode Enable (rw) */
    Ifx_UReg_8Bit reserved_1:1;       /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_8Bit GF0:1;              /**< \brief [2:2] General Purpose Flag Bit 0 (rw) */
    Ifx_UReg_8Bit GF1:1;              /**< \brief [3:3] General Purpose Flag Bit 1 (rw) */
    Ifx_UReg_8Bit reserved_4:3;       /**< \brief [6:4] \internal Reserved */
    Ifx_UReg_8Bit SMOD:1;             /**< \brief [7:7] Double Baud Rate Enable (rw) */
} Ifx_SCR_PCON_Bits;

/** \brief Program Status Word Register */
typedef struct _Ifx_SCR_PSW_Bits
{
    Ifx_UReg_8Bit P:1;                /**< \brief [0:0] Parity Flag (rh) */
    Ifx_UReg_8Bit F1:1;               /**< \brief [1:1] General Purpose Flag (rw) */
    Ifx_UReg_8Bit OV:1;               /**< \brief [2:2] Overflow Flag (rwh) */
    Ifx_UReg_8Bit RS:2;               /**< \brief [4:3] Register Bank Select (rw) */
    Ifx_UReg_8Bit F0:1;               /**< \brief [5:5] General Purpose Flag (rw) */
    Ifx_UReg_8Bit AC:1;               /**< \brief [6:6] Auxiliary Carry Flag (rwh) */
    Ifx_UReg_8Bit CY:1;               /**< \brief [7:7] Carry Flag (rwh) */
} Ifx_SCR_PSW_Bits;

/** \brief Port P0${n} Input Register */
typedef struct _Ifx_SCR_P_IN_Bits
{
    Ifx_UReg_8Bit P0:1;               /**< \brief [0:0] Port n Input Bit 0 (rh) */
    Ifx_UReg_8Bit P1:1;               /**< \brief [1:1] Port n Input Bit 1 (rh) */
    Ifx_UReg_8Bit P2:1;               /**< \brief [2:2] Port n Input Bit 2 (rh) */
    Ifx_UReg_8Bit P3:1;               /**< \brief [3:3] Port n Input Bit 3 (rh) */
    Ifx_UReg_8Bit P4:1;               /**< \brief [4:4] Port n Input Bit 4 (rh) */
    Ifx_UReg_8Bit P5:1;               /**< \brief [5:5] Port n Input Bit 5 (rh) */
    Ifx_UReg_8Bit P6:1;               /**< \brief [6:6] Port n Input Bit 6 (rh) */
    Ifx_UReg_8Bit P7:1;               /**< \brief [7:7] Port n Input Bit 7 (rh) */
} Ifx_SCR_P_IN_Bits;

/** \brief Port P0${n} Input/Output Control Register ${k} */
typedef struct _Ifx_SCR_P_IOCR_Bits
{
    Ifx_UReg_8Bit reserved_0:3;       /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_8Bit PC:5;               /**< \brief [7:3] Port Control for Port n Pin ${k} (rw) */
} Ifx_SCR_P_IOCR_Bits;

/** \brief Port P0${n} Output Modification Clear Register */
typedef struct _Ifx_SCR_P_OMCR_Bits
{
    Ifx_UReg_8Bit PCL0:1;             /**< \brief [0:0] Port n Clear Bit 0 (w) */
    Ifx_UReg_8Bit PCL1:1;             /**< \brief [1:1] Port n Clear Bit 1 (w) */
    Ifx_UReg_8Bit PCL2:1;             /**< \brief [2:2] Port n Clear Bit 2 (w) */
    Ifx_UReg_8Bit PCL3:1;             /**< \brief [3:3] Port n Clear Bit 3 (w) */
    Ifx_UReg_8Bit PCL4:1;             /**< \brief [4:4] Port n Clear Bit 4 (w) */
    Ifx_UReg_8Bit PCL5:1;             /**< \brief [5:5] Port n Clear Bit 5 (w) */
    Ifx_UReg_8Bit PCL6:1;             /**< \brief [6:6] Port n Clear Bit 6 (w) */
    Ifx_UReg_8Bit PCL7:1;             /**< \brief [7:7] Port n Clear Bit 7 (w) */
} Ifx_SCR_P_OMCR_Bits;

/** \brief Port P0${n} Output Modification Set Register */
typedef struct _Ifx_SCR_P_OMSR_Bits
{
    Ifx_UReg_8Bit PS0:1;              /**< \brief [0:0] Port n Set Bit 0 (w) */
    Ifx_UReg_8Bit PS1:1;              /**< \brief [1:1] Port n Set Bit 1 (w) */
    Ifx_UReg_8Bit PS2:1;              /**< \brief [2:2] Port n Set Bit 2 (w) */
    Ifx_UReg_8Bit PS3:1;              /**< \brief [3:3] Port n Set Bit 3 (w) */
    Ifx_UReg_8Bit PS4:1;              /**< \brief [4:4] Port n Set Bit 4 (w) */
    Ifx_UReg_8Bit PS5:1;              /**< \brief [5:5] Port n Set Bit 5 (w) */
    Ifx_UReg_8Bit PS6:1;              /**< \brief [6:6] Port n Set Bit 6 (w) */
    Ifx_UReg_8Bit PS7:1;              /**< \brief [7:7] Port n Set Bit 7 (w) */
} Ifx_SCR_P_OMSR_Bits;

/** \brief Port P0${n} Output Modification Toggle Register */
typedef struct _Ifx_SCR_P_OMTR_Bits
{
    Ifx_UReg_8Bit PTL0:1;             /**< \brief [0:0] Port n Toggle Bit 0 (w) */
    Ifx_UReg_8Bit PTL1:1;             /**< \brief [1:1] Port n Toggle Bit 1 (w) */
    Ifx_UReg_8Bit PTL2:1;             /**< \brief [2:2] Port n Toggle Bit 2 (w) */
    Ifx_UReg_8Bit PTL3:1;             /**< \brief [3:3] Port n Toggle Bit 3 (w) */
    Ifx_UReg_8Bit PTL4:1;             /**< \brief [4:4] Port n Toggle Bit 4 (w) */
    Ifx_UReg_8Bit PTL5:1;             /**< \brief [5:5] Port n Toggle Bit 5 (w) */
    Ifx_UReg_8Bit PTL6:1;             /**< \brief [6:6] Port n Toggle Bit 6 (w) */
    Ifx_UReg_8Bit PTL7:1;             /**< \brief [7:7] Port n Toggle Bit 7 (w) */
} Ifx_SCR_P_OMTR_Bits;

/** \brief Port P0${n} Output Register */
typedef struct _Ifx_SCR_P_OUT_Bits
{
    Ifx_UReg_8Bit P0:1;               /**< \brief [0:0] Port n Output Bit 0 (rwh) */
    Ifx_UReg_8Bit P1:1;               /**< \brief [1:1] Port n Output Bit 1 (rwh) */
    Ifx_UReg_8Bit P2:1;               /**< \brief [2:2] Port n Output Bit 2 (rwh) */
    Ifx_UReg_8Bit P3:1;               /**< \brief [3:3] Port n Output Bit 3 (rwh) */
    Ifx_UReg_8Bit P4:1;               /**< \brief [4:4] Port n Output Bit 4 (rwh) */
    Ifx_UReg_8Bit P5:1;               /**< \brief [5:5] Port n Output Bit 5 (rwh) */
    Ifx_UReg_8Bit P6:1;               /**< \brief [6:6] Port n Output Bit 6 (rwh) */
    Ifx_UReg_8Bit P7:1;               /**< \brief [7:7] Port n Output Bit 7 (rwh) */
} Ifx_SCR_P_OUT_Bits;

/** \brief Port P0${n} Pin Function Decision Control Register */
typedef struct _Ifx_SCR_P_PDISC_Bits
{
    Ifx_UReg_8Bit PDIS0:1;            /**< \brief [0:0] Pin Function Decision Control for Pin 0 (rw) */
    Ifx_UReg_8Bit PDIS1:1;            /**< \brief [1:1] Pin Function Decision Control for Pin 1 (rw) */
    Ifx_UReg_8Bit PDIS2:1;            /**< \brief [2:2] Pin Function Decision Control for Pin 2 (rw) */
    Ifx_UReg_8Bit PDIS3:1;            /**< \brief [3:3] Pin Function Decision Control for Pin 3 (rw) */
    Ifx_UReg_8Bit PDIS4:1;            /**< \brief [4:4] Pin Function Decision Control for Pin 4 (rw) */
    Ifx_UReg_8Bit PDIS5:1;            /**< \brief [5:5] Pin Function Decision Control for Pin 5 (rw) */
    Ifx_UReg_8Bit PDIS6:1;            /**< \brief [6:6] Pin Function Decision Control for Pin 6 (rw) */
    Ifx_UReg_8Bit PDIS7:1;            /**< \brief [7:7] Pin Function Decision Control for Pin 7 (rw) */
} Ifx_SCR_P_PDISC_Bits;

/** \brief Port P0${n} Pad Driver Mode 0 Register */
typedef struct _Ifx_SCR_P_PDR0_Bits
{
    Ifx_UReg_8Bit PD0:2;              /**< \brief [1:0] Pad Driver Mode for Port n Pin 0 (rw) */
    Ifx_UReg_8Bit PL0:2;              /**< \brief [3:2] Pad Level Selection for Port n Pin 0 (rw) */
    Ifx_UReg_8Bit PD1:2;              /**< \brief [5:4] Pad Driver Mode for Port n Pin 1 (rw) */
    Ifx_UReg_8Bit PL1:2;              /**< \brief [7:6] Pad Level Selection for Port n Pin 1 (rw) */
} Ifx_SCR_P_PDR0_Bits;

/** \brief Port P0${n} Pad Driver Mode 2 Register */
typedef struct _Ifx_SCR_P_PDR2_Bits
{
    Ifx_UReg_8Bit PD2:2;              /**< \brief [1:0] Pad Driver Mode for Port n Pin 2 (rw) */
    Ifx_UReg_8Bit PL2:2;              /**< \brief [3:2] Pad Level Selection for Port n Pin 2 (rw) */
    Ifx_UReg_8Bit PD3:2;              /**< \brief [5:4] Pad Driver Mode for Port n Pin 3 (rw) */
    Ifx_UReg_8Bit PL3:2;              /**< \brief [7:6] Pad Level Selection for Port n Pin 3 (rw) */
} Ifx_SCR_P_PDR2_Bits;

/** \brief Port P0${n} Pad Driver Mode 4 Register */
typedef struct _Ifx_SCR_P_PDR4_Bits
{
    Ifx_UReg_8Bit PD4:2;              /**< \brief [1:0] Pad Driver Mode for Port n Pin 4 (rw) */
    Ifx_UReg_8Bit PL4:2;              /**< \brief [3:2] Pad Level Selection for Port n Pin 4 (rw) */
    Ifx_UReg_8Bit PD5:2;              /**< \brief [5:4] Pad Driver Mode for Port n Pin 5 (rw) */
    Ifx_UReg_8Bit PL5:2;              /**< \brief [7:6] Pad Level Selection for Port n Pin 5 (rw) */
} Ifx_SCR_P_PDR4_Bits;

/** \brief Port P0${n} Pad Driver Mode 6 Register */
typedef struct _Ifx_SCR_P_PDR6_Bits
{
    Ifx_UReg_8Bit PD6:2;              /**< \brief [1:0] Pad Driver Mode for Port n Pin 6 (rw) */
    Ifx_UReg_8Bit PL6:2;              /**< \brief [3:2] Pad Level Selection for Port n Pin 6 (rw) */
    Ifx_UReg_8Bit PD7:2;              /**< \brief [5:4] Pad Driver Mode for Port n Pin 7 (rw) */
    Ifx_UReg_8Bit PL7:2;              /**< \brief [7:6] Pad Level Selection for Port n Pin 7 (rw) */
} Ifx_SCR_P_PDR6_Bits;

/** \brief Count Clock Register ${n} */
typedef struct _Ifx_SCR_RTC_CNT_Bits
{
    Ifx_UReg_8Bit CNT_VAL:8;          /**< \brief [7:0] Real-Time Clock Count Value (rwh) */
} Ifx_SCR_RTC_CNT_Bits;

/** \brief Real-Time Clock Control Register */
typedef struct _Ifx_SCR_RTC_CON_Bits
{
    Ifx_UReg_8Bit RTCC:1;             /**< \brief [0:0] Real-Time Clock Start/Stop Control (rw) */
    Ifx_UReg_8Bit RTCCLKSEL:1;        /**< \brief [1:1] Real-Time Clock Input Clock Selection (rw) */
    Ifx_UReg_8Bit RTPBYP:1;           /**< \brief [2:2] Real-Time Clock 9-bit Prescaler Bypass (rw) */
    Ifx_UReg_8Bit RTCCT:1;            /**< \brief [3:3] Real-Time Clock Capture Event Trigger (rwh) */
    Ifx_UReg_8Bit ECRTC:1;            /**< \brief [4:4] Real-Time Clock Compare Interrupt Enable (rw) */
    Ifx_UReg_8Bit RTC32SEL:1;         /**< \brief [5:5] External Oscillator Selection (32 kHz / 32.768 kHz) (rw) */
    Ifx_UReg_8Bit CFRTC:1;            /**< \brief [6:6] Real-Time Clock Compare Flag (rwh) */
    Ifx_UReg_8Bit INIT32:1;           /**< \brief [7:7] RTC32SEL Protection Bit (rw) */
} Ifx_SCR_RTC_CON_Bits;

/** \brief Real-Time Clock Compare/Capture Register ${n} */
typedef struct _Ifx_SCR_RTC_CR_Bits
{
    Ifx_UReg_8Bit CC_VAL:8;           /**< \brief [7:0] Compare/Capture Value (rwh) */
} Ifx_SCR_RTC_CR_Bits;

/** \brief SCR Interrupt Data Exchange Register */
typedef struct _Ifx_SCR_SCRINTEXCHG_Bits
{
    Ifx_UReg_8Bit SCRINT:8;           /**< \brief [7:0] Data Exchange from SCR to Main Controller (rwh) */
} Ifx_SCR_SCRINTEXCHG_Bits;

/** \brief Clock Control Register */
typedef struct _Ifx_SCR_SCU_CMCON_Bits
{
    Ifx_UReg_8Bit DIV:4;              /**< \brief [3:0] Clock Divider (rw) */
    Ifx_UReg_8Bit OSCWAKE:1;          /**< \brief [4:4] Oscillator Wake-Up (rw) */
    Ifx_UReg_8Bit OSCPD:1;            /**< \brief [5:5] 100 MHz Oscillator Power Down Control in Standby Mode (rwh) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_SCU_CMCON_Bits;

/** \brief Peripheral Interrupt Enable Register */
typedef struct _Ifx_SCR_SCU_MODIEN_Bits
{
    Ifx_UReg_8Bit EIREN:1;            /**< \brief [0:0] SSC Error Interrupt Enable (rw) */
    Ifx_UReg_8Bit TIREN:1;            /**< \brief [1:1] SSC Transmit Interrupt Enable (rw) */
    Ifx_UReg_8Bit RIREN:1;            /**< \brief [2:2] SSC Receive Interrupt Enable (rw) */
    Ifx_UReg_8Bit FEEN:1;             /**< \brief [3:3] SSC Receive FIFO Empty Interrupt Enable (rw) */
    Ifx_UReg_8Bit FFEN:1;             /**< \brief [4:4] SSC Receive FIFO Full Interrupt Enable (rw) */
    Ifx_UReg_8Bit reserved_5:3;       /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_MODIEN_Bits;

/** \brief Main Reset Status Register */
typedef struct _Ifx_SCR_SCU_MRSTST_Bits
{
    Ifx_UReg_8Bit SMURST:1;           /**< \brief [0:0] SMU Reset Status Bit (rwh) */
    Ifx_UReg_8Bit RST:1;              /**< \brief [1:1] Application Reset Status Bit (rwh) */
    Ifx_UReg_8Bit reserved_2:6;       /**< \brief [7:2] \internal Reserved */
} Ifx_SCR_SCU_MRSTST_Bits;

/** \brief Page Register for SFRs */
typedef struct _Ifx_SCR_SCU_PAGE_Bits
{
    Ifx_UReg_8Bit PAGE:3;             /**< \brief [2:0] Page Bits (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit STNR:2;             /**< \brief [5:4] Storage Number (w) */
    Ifx_UReg_8Bit OP:2;               /**< \brief [7:6] Operation (w) */
} Ifx_SCR_SCU_PAGE_Bits;

/** \brief Peripheral Management Control Register 1 */
typedef struct _Ifx_SCR_SCU_PMCON1_Bits
{
    Ifx_UReg_8Bit SSC_DIS:1;          /**< \brief [0:0] SSC Disable Request (active high) (rw) */
    Ifx_UReg_8Bit T2CCU_DIS:1;        /**< \brief [1:1] T2CCU Disable Request (active high) (rw) */
    Ifx_UReg_8Bit RTC_DIS:1;          /**< \brief [2:2] RTC Disable Request (active high) (rw) */
    Ifx_UReg_8Bit WCAN_DIS:1;         /**< \brief [3:3] WCAN Disable Request (active high) (rw) */
    Ifx_UReg_8Bit WDT_DIS:1;          /**< \brief [4:4] Watchdog Disable Request (active high) (rw) */
    Ifx_UReg_8Bit LIN_DIS:1;          /**< \brief [5:5] LIN Disable Request (active high) (rw) */
    Ifx_UReg_8Bit OCDS_DIS:1;         /**< \brief [6:6] OCDS Disable Request (active high) (rw) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_SCU_PMCON1_Bits;

/** \brief Reset Control Register */
typedef struct _Ifx_SCR_SCU_RSTCON_Bits
{
    Ifx_UReg_8Bit ECCRSTEN:1;         /**< \brief [0:0] Double Bit ECC Reset Enable Bit (rw) */
    Ifx_UReg_8Bit WDTRSTEN:1;         /**< \brief [1:1] Watchdog Reset Enable Bit (rw) */
    Ifx_UReg_8Bit reserved_2:5;       /**< \brief [6:2] \internal Reserved */
    Ifx_UReg_8Bit SWRQ:1;             /**< \brief [7:7] Soft Reset Request (rwh) */
} Ifx_SCR_SCU_RSTCON_Bits;

/** \brief SCR Reset Status Register */
typedef struct _Ifx_SCR_SCU_RSTST_Bits
{
    Ifx_UReg_8Bit ECCRST:1;           /**< \brief [0:0] Double Bit ECC Reset Indication Bit (rwh) */
    Ifx_UReg_8Bit WDTRST:1;           /**< \brief [1:1] Watchdog Timer Reset Indication Bit (rwh) */
    Ifx_UReg_8Bit SOFTRST:1;          /**< \brief [2:2] Soft Reset Indication Bit (rwh) */
    Ifx_UReg_8Bit reserved_3:5;       /**< \brief [7:3] \internal Reserved */
} Ifx_SCR_SCU_RSTST_Bits;

/** \brief SCU Status Register */
typedef struct _Ifx_SCR_SCU_SR_Bits
{
    Ifx_UReg_8Bit reserved_0:3;       /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_8Bit STBY:1;             /**< \brief [3:3] Standby Mode Status (rh) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_SCU_SR_Bits;

/** \brief Standby Mode Wake-Up Register */
typedef struct _Ifx_SCR_SCU_STDBYWKP_Bits
{
    Ifx_UReg_8Bit SCRWKP:1;           /**< \brief [0:0] Software Wake-Up from Standby Mode (rwh) */
    Ifx_UReg_8Bit RTCWKSEL:1;         /**< \brief [1:1] RTC Wake-Up Select from Standby Mode (rw) */
    Ifx_UReg_8Bit WCANWKSEL:1;        /**< \brief [2:2] WCAN Interrupt Wake-Up Select from Standby Mode (rw) */
    Ifx_UReg_8Bit WDTWKSEL:1;         /**< \brief [3:3] WDT Wake-Up Select from Standby Mode (rw) */
    Ifx_UReg_8Bit ECCWKSEL:1;         /**< \brief [4:4] RAM ECC Wake-Up Select from Standby Mode (rw) */
    Ifx_UReg_8Bit reserved_5:3;       /**< \brief [7:5] \internal Reserved */
} Ifx_SCR_SCU_STDBYWKP_Bits;

/** \brief Stack Pointer */
typedef struct _Ifx_SCR_SP_Bits
{
    Ifx_UReg_8Bit SP:8;               /**< \brief [7:0] Stack Pointer Value (rwh) */
} Ifx_SCR_SP_Bits;

/** \brief Baud Rate Timer Reload Register High */
typedef struct _Ifx_SCR_SSC_BRH_Bits
{
    Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baud Rate Timer Reload Register Value, high byte (rw) */
} Ifx_SCR_SSC_BRH_Bits;

/** \brief Baud Rate Timer Reload Register Low */
typedef struct _Ifx_SCR_SSC_BRL_Bits
{
    Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baud Rate Timer Reload Register Value, low byte (rw) */
} Ifx_SCR_SSC_BRL_Bits;

/** \brief Control Register High [Operation Mode] */
typedef struct _Ifx_SCR_SSC_CONOH_Bits
{
    Ifx_UReg_8Bit TE:1;               /**< \brief [0:0] Transmit Error Flag (rwh) */
    Ifx_UReg_8Bit RE:1;               /**< \brief [1:1] Receive Error Flag (rwh) */
    Ifx_UReg_8Bit RFE:1;              /**< \brief [2:2] Receive FIFO Buffer Empty Flag (rh) */
    Ifx_UReg_8Bit BE:1;               /**< \brief [3:3] Baudrate Error Flag (rwh) */
    Ifx_UReg_8Bit BSY:1;              /**< \brief [4:4] Busy Flag (rh) */
    Ifx_UReg_8Bit RFF:1;              /**< \brief [5:5] Receive FIFO Buffer Full Flag (rh) */
    Ifx_UReg_8Bit MS:1;               /**< \brief [6:6] Master Select (rw) */
    Ifx_UReg_8Bit EN:1;               /**< \brief [7:7] Enable Bit = 1 (needed for operating mode) (rw) */
} Ifx_SCR_SSC_CONOH_Bits;

/** \brief Control Register Low [Operation Mode] */
typedef struct _Ifx_SCR_SSC_CONOL_Bits
{
    Ifx_UReg_8Bit BC:4;               /**< \brief [3:0] Bit Count Field (rh) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_SSC_CONOL_Bits;

/** \brief Control Register High [Programming Mode] */
typedef struct _Ifx_SCR_SSC_CONPH_Bits
{
    Ifx_UReg_8Bit TEN:1;              /**< \brief [0:0] Transmit Error Enable (rw) */
    Ifx_UReg_8Bit REN:1;              /**< \brief [1:1] Receive Error Enable (rw) */
    Ifx_UReg_8Bit reserved_2:1;       /**< \brief [2:2] \internal Reserved */
    Ifx_UReg_8Bit BEN:1;              /**< \brief [3:3] Baudrate Error Enable (rw) */
    Ifx_UReg_8Bit reserved_4:1;       /**< \brief [4:4] \internal Reserved */
    Ifx_UReg_8Bit reserved_5:1;       /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_8Bit MS:1;               /**< \brief [6:6] Master Select (rw) */
    Ifx_UReg_8Bit EN:1;               /**< \brief [7:7] Enable Bit = 0 (needed for programming mode) (rw) */
} Ifx_SCR_SSC_CONPH_Bits;

/** \brief Control Register Low [Programming Mode] */
typedef struct _Ifx_SCR_SSC_CONPL_Bits
{
    Ifx_UReg_8Bit BM:3;               /**< \brief [2:0] Data Width Selection (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit HB:1;               /**< \brief [4:4] Heading Control (rw) */
    Ifx_UReg_8Bit PH:1;               /**< \brief [5:5] Clock Phase Control (rw) */
    Ifx_UReg_8Bit PO:1;               /**< \brief [6:6] Clock Polarity Control (rw) */
    Ifx_UReg_8Bit LB:1;               /**< \brief [7:7] Loop Back Control (rw) */
} Ifx_SCR_SSC_CONPL_Bits;

/** \brief Receiver Buffer Register */
typedef struct _Ifx_SCR_SSC_RBL_Bits
{
    Ifx_UReg_8Bit RB_VALUE:8;         /**< \brief [7:0] Receive Data Register Value (rh) */
} Ifx_SCR_SSC_RBL_Bits;

/** \brief Transmitter Buffer Register */
typedef struct _Ifx_SCR_SSC_TBL_Bits
{
    Ifx_UReg_8Bit TB_VALUE:8;         /**< \brief [7:0] Transmit Data Register Value (rw) */
} Ifx_SCR_SSC_TBL_Bits;

/** \brief System Control Register 0 */
typedef struct _Ifx_SCR_SYSCON0_Bits
{
    Ifx_UReg_8Bit RMAP:1;             /**< \brief [0:0] Special Function Register Map Control (rw) */
    Ifx_UReg_8Bit reserved_1:1;       /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_8Bit AMSEL:1;            /**< \brief [2:2] Active Memory Map Select (rw) */
    Ifx_UReg_8Bit reserved_3:5;       /**< \brief [7:3] \internal Reserved */
} Ifx_SCR_SYSCON0_Bits;

/** \brief Timer 0/1 Control Register */
typedef struct _Ifx_SCR_T01_TCON_Bits
{
    Ifx_UReg_8Bit IT0:1;              /**< \brief [0:0] External Interrupt 0 Level/Edge Trigger Control (rw) */
    Ifx_UReg_8Bit IE0:1;              /**< \brief [1:1] External Interrupt 0 Flag (rwh) */
    Ifx_UReg_8Bit IT1:1;              /**< \brief [2:2] External Interrupt 1 Level/Edge Trigger Control (rw) */
    Ifx_UReg_8Bit IE1:1;              /**< \brief [3:3] External Interrupt 1 Flag (rwh) */
    Ifx_UReg_8Bit TR0:1;              /**< \brief [4:4] Timer 0 Run Control (rw) */
    Ifx_UReg_8Bit TF0:1;              /**< \brief [5:5] Timer 0 Overflow Flag (rwh) */
    Ifx_UReg_8Bit TR1:1;              /**< \brief [6:6] Timer 1 Run Control (rw) */
    Ifx_UReg_8Bit TF1:1;              /**< \brief [7:7] Timer 1 Overflow Flag (rwh) */
} Ifx_SCR_T01_TCON_Bits;

/** \brief Timer 0 High Byte */
typedef struct _Ifx_SCR_T01_TH0_Bits
{
    Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 0 High Byte Value (rwh) */
} Ifx_SCR_T01_TH0_Bits;

/** \brief Timer 1 High Byte */
typedef struct _Ifx_SCR_T01_TH1_Bits
{
    Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 1 High Byte Value (rwh) */
} Ifx_SCR_T01_TH1_Bits;

/** \brief Timer 0 Low Byte */
typedef struct _Ifx_SCR_T01_TL0_Bits
{
    Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 0 Low Byte Value (rwh) */
} Ifx_SCR_T01_TL0_Bits;

/** \brief Timer 1 Low Byte */
typedef struct _Ifx_SCR_T01_TL1_Bits
{
    Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Timer 1 Low Byte Value (rwh) */
} Ifx_SCR_T01_TL1_Bits;

/** \brief Timer Mode Register */
typedef struct _Ifx_SCR_T01_TMOD_Bits
{
    Ifx_UReg_8Bit T0M:2;              /**< \brief [1:0] Timer 0 Mode Select Bits (rw) */
    Ifx_UReg_8Bit T0S:1;              /**< \brief [2:2] Timer 0 Input Selector (rw) */
    Ifx_UReg_8Bit GATE0:1;            /**< \brief [3:3] Timer 0 Gate Control (rw) */
    Ifx_UReg_8Bit T1M:2;              /**< \brief [5:4] Timer 1 Mode Select Bits (rw) */
    Ifx_UReg_8Bit T1S:1;              /**< \brief [6:6] Timer 1 Input Selector (rw) */
    Ifx_UReg_8Bit GATE1:1;            /**< \brief [7:7] Timer 1 Gate Control (rw) */
} Ifx_SCR_T01_TMOD_Bits;

/** \brief T2CCU Capture/Compare Register x High */
typedef struct _Ifx_SCR_T2CCU_CC02_CCXH_Bits
{
    Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare High Byte Value for Channel x (rwh) */
} Ifx_SCR_T2CCU_CC02_CCXH_Bits;

/** \brief T2CCU Capture/Compare Register x Low */
typedef struct _Ifx_SCR_T2CCU_CC02_CCXL_Bits
{
    Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare Low Byte Value for Channel x (rwh) */
} Ifx_SCR_T2CCU_CC02_CCXL_Bits;

/** \brief T2CCU Capture/Compare Register x High */
typedef struct _Ifx_SCR_T2CCU_CC35_CCXH_Bits
{
    Ifx_UReg_8Bit CCVALH:8;           /**< \brief [7:0] Capture/Compare High Byte Value for Channel x (rwh) */
} Ifx_SCR_T2CCU_CC35_CCXH_Bits;

/** \brief T2CCU Capture/Compare Register x Low */
typedef struct _Ifx_SCR_T2CCU_CC35_CCXL_Bits
{
    Ifx_UReg_8Bit CCVALL:8;           /**< \brief [7:0] Capture/Compare Low Byte Value for Channel x (rwh) */
} Ifx_SCR_T2CCU_CC35_CCXL_Bits;

/** \brief T2CCU Capture/Compare Enable Register */
typedef struct _Ifx_SCR_T2CCU_CCEN_Bits
{
    Ifx_UReg_8Bit CCM0:2;             /**< \brief [1:0] Capture/Compare Enable for Channel 0 (rw) */
    Ifx_UReg_8Bit CCM1:2;             /**< \brief [3:2] Capture/Compare Enable for Channel 1 (rw) */
    Ifx_UReg_8Bit CCM2:2;             /**< \brief [5:4] Capture/Compare Enable for Channel 2 (rw) */
    Ifx_UReg_8Bit CCM3:2;             /**< \brief [7:6] Capture/Compare Enable for Channel 3 (rw) */
} Ifx_SCR_T2CCU_CCEN_Bits;

/** \brief T2CCU Capture/Compare Time Base Select Register */
typedef struct _Ifx_SCR_T2CCU_CCTBSEL_Bits
{
    Ifx_UReg_8Bit CCTB0:1;            /**< \brief [0:0] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTB1:1;            /**< \brief [1:1] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTB2:1;            /**< \brief [2:2] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTB3:1;            /**< \brief [3:3] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTB4:1;            /**< \brief [4:4] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTB5:1;            /**< \brief [5:5] Channel x Time Base Select (rw) */
    Ifx_UReg_8Bit CCTTOV:1;           /**< \brief [6:6] Trigger CCT Timer Overflow Event (rwh) */
    Ifx_UReg_8Bit CASC:1;             /**< \brief [7:7] Cascade Timers (rw) */
} Ifx_SCR_T2CCU_CCTBSEL_Bits;

/** \brief T2CCU Capture/Compare Timer Control Register */
typedef struct _Ifx_SCR_T2CCU_CCTCON_Bits
{
    Ifx_UReg_8Bit CCTST:1;            /**< \brief [0:0] Capture/Compare Timer Start/Stop Control (rw) */
    Ifx_UReg_8Bit TIMSYN:1;           /**< \brief [1:1] Enable Synchronized Timer Starts (rw) */
    Ifx_UReg_8Bit CCTOVEN:1;          /**< \brief [2:2] Capture/Compare Timer Overflow Interrupt Enable (rw) */
    Ifx_UReg_8Bit CCTOVF:1;           /**< \brief [3:3] Capture/Compare Timer Overflow Flag (rwh) */
    Ifx_UReg_8Bit CCTPRE:4;           /**< \brief [7:4] Compare/Compare Timer Prescaler Bitfield (rw) */
} Ifx_SCR_T2CCU_CCTCON_Bits;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register High */
typedef struct _Ifx_SCR_T2CCU_CCTDTCH_Bits
{
    Ifx_UReg_8Bit DTE0:1;             /**< \brief [0:0] Dead-Time Enable for Channel Pair x (rw) */
    Ifx_UReg_8Bit DTE1:1;             /**< \brief [1:1] Dead-Time Enable for Channel Pair x (rw) */
    Ifx_UReg_8Bit DTE2:1;             /**< \brief [2:2] Dead-Time Enable for Channel Pair x (rw) */
    Ifx_UReg_8Bit DTLEV:1;            /**< \brief [3:3] Dead-Time Level (rw) */
    Ifx_UReg_8Bit DTR0:1;             /**< \brief [4:4] Dead-Time Run Indication Bits (rh) */
    Ifx_UReg_8Bit DTR1:1;             /**< \brief [5:5] Dead-Time Run Indication Bits (rh) */
    Ifx_UReg_8Bit DTR2:1;             /**< \brief [6:6] Dead-Time Run Indication Bits (rh) */
    Ifx_UReg_8Bit DTRES:1;            /**< \brief [7:7] Reset Dead-Time Counters (rwh) */
} Ifx_SCR_T2CCU_CCTDTCH_Bits;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register Low */
typedef struct _Ifx_SCR_T2CCU_CCTDTCL_Bits
{
    Ifx_UReg_8Bit DTM:8;              /**< \brief [7:0] Dead-Time Value (rw) */
} Ifx_SCR_T2CCU_CCTDTCL_Bits;

/** \brief T2CCU Capture/Compare Timer Register High */
typedef struct _Ifx_SCR_T2CCU_CCTH_Bits
{
    Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare Timer High Byte Value [15:8] (rwh) */
} Ifx_SCR_T2CCU_CCTH_Bits;

/** \brief T2CCU Capture/Compare Timer Register Low */
typedef struct _Ifx_SCR_T2CCU_CCTL_Bits
{
    Ifx_UReg_8Bit CCT:8;              /**< \brief [7:0] Capture/Compare Timer Low Byte Value [7:0] (rwh) */
} Ifx_SCR_T2CCU_CCTL_Bits;

/** \brief T2CCU Capture/Compare Timer Reload Register High */
typedef struct _Ifx_SCR_T2CCU_CCTRELH_Bits
{
    Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare Timer High Byte Reload Value [15:8] (rw) */
} Ifx_SCR_T2CCU_CCTRELH_Bits;

/** \brief T2CCU Capture/Compare Timer Reload Register Low */
typedef struct _Ifx_SCR_T2CCU_CCTRELL_Bits
{
    Ifx_UReg_8Bit CCTREL:8;           /**< \brief [7:0] Capture/Compare Timer Low Byte Reload Value [7:0] (rw) */
} Ifx_SCR_T2CCU_CCTRELL_Bits;

/** \brief T2CCU Compare Control Register */
typedef struct _Ifx_SCR_T2CCU_COCON_Bits
{
    Ifx_UReg_8Bit COMOD:2;            /**< \brief [1:0] Compare Mode Control (for compare channels) (rw) */
    Ifx_UReg_8Bit POLA:1;             /**< \brief [2:2] Compare Active Level for Channel Group A (rw) */
    Ifx_UReg_8Bit POLB:1;             /**< \brief [3:3] Compare Active Level for Channel Group B (rw) */
    Ifx_UReg_8Bit CM4F:1;             /**< \brief [4:4] Compare Channel 4 Interrupt Flag (rwh) */
    Ifx_UReg_8Bit CM5F:1;             /**< \brief [5:5] Compare Channel 5 Interrupt Flag (rwh) */
    Ifx_UReg_8Bit CCM4:1;             /**< \brief [6:6] Compare Enable for Channel 4 (rw) */
    Ifx_UReg_8Bit CCM5:1;             /**< \brief [7:7] Compare Enable for Channel 5 (rw) */
} Ifx_SCR_T2CCU_COCON_Bits;

/** \brief T2CCU Compare Shadow Register */
typedef struct _Ifx_SCR_T2CCU_COSHDW_Bits
{
    Ifx_UReg_8Bit COOUT0:1;           /**< \brief [0:0] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit COOUT1:1;           /**< \brief [1:1] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit COOUT2:1;           /**< \brief [2:2] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit COOUT3:1;           /**< \brief [3:3] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit COOUT4:1;           /**< \brief [4:4] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit COOUT5:1;           /**< \brief [5:5] Compare Channel x Output (rwh) */
    Ifx_UReg_8Bit TXOV:1;             /**< \brief [6:6] Enable Shadow Transfer On Timer Overflow (rw) */
    Ifx_UReg_8Bit ENSHDW:1;           /**< \brief [7:7] Enable Shadow Transfer With COOUTx (rwh) */
} Ifx_SCR_T2CCU_COSHDW_Bits;

/** \brief Page Register for T2CCU */
typedef struct _Ifx_SCR_T2CCU_PAGE_Bits
{
    Ifx_UReg_8Bit PAGE:3;             /**< \brief [2:0] Page Bits (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit STNR:2;             /**< \brief [5:4] Storage Number (w) */
    Ifx_UReg_8Bit OP:2;               /**< \brief [7:6] Operation (w) */
} Ifx_SCR_T2CCU_PAGE_Bits;

/** \brief Timer 2 Control Register */
typedef struct _Ifx_SCR_T2_CON_Bits
{
    Ifx_UReg_8Bit CP_RL2:1;           /**< \brief [0:0] Capture/Reload Select (rw) */
    Ifx_UReg_8Bit C_T2:1;             /**< \brief [1:1] Timer or Counter Select (rw) */
    Ifx_UReg_8Bit TR2:1;              /**< \brief [2:2] Timer 2 Run Control (rwh) */
    Ifx_UReg_8Bit EXEN2:1;            /**< \brief [3:3] Timer 2 External Enable Control (rw) */
    Ifx_UReg_8Bit reserved_4:2;       /**< \brief [5:4] \internal Reserved */
    Ifx_UReg_8Bit EXF2:1;             /**< \brief [6:6] Timer 2 External Flag (rwh) */
    Ifx_UReg_8Bit TF2:1;              /**< \brief [7:7] Timer 2 Overflow/Underflow Flag (rwh) */
} Ifx_SCR_T2_CON_Bits;

/** \brief Timer 2 Control Register 1 */
typedef struct _Ifx_SCR_T2_CON1_Bits
{
    Ifx_UReg_8Bit EXF2EN:1;           /**< \brief [0:0] External Interrupt Enable (rw) */
    Ifx_UReg_8Bit TF2EN:1;            /**< \brief [1:1] Overflow/Underflow Interrupt Enable (rw) */
    Ifx_UReg_8Bit reserved_2:6;       /**< \brief [7:2] \internal Reserved */
} Ifx_SCR_T2_CON1_Bits;

/** \brief Timer 2 Mode Register */
typedef struct _Ifx_SCR_T2_MOD_Bits
{
    Ifx_UReg_8Bit DCEN:1;             /**< \brief [0:0] Up/Down Counter Enable (rw) */
    Ifx_UReg_8Bit T2PRE:3;            /**< \brief [3:1] Timer 2 Prescaler Bit (rw) */
    Ifx_UReg_8Bit PREN:1;             /**< \brief [4:4] Prescaler Enable (rw) */
    Ifx_UReg_8Bit EDGESEL:1;          /**< \brief [5:5] Edge Select in Capture Mode/Reload Mode (rw) */
    Ifx_UReg_8Bit T2RHEN:1;           /**< \brief [6:6] Timer 2 External Start Enable (rw) */
    Ifx_UReg_8Bit T2REGS:1;           /**< \brief [7:7] Edge Select for Timer 2 External Start (rw) */
} Ifx_SCR_T2_MOD_Bits;

/** \brief Timer 2 Reload/Capture Register, High Byte */
typedef struct _Ifx_SCR_T2_RC2H_Bits
{
    Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture Value [15:8] (rwh) */
} Ifx_SCR_T2_RC2H_Bits;

/** \brief Timer 2 Reload/Capture Register, Low Byte */
typedef struct _Ifx_SCR_T2_RC2L_Bits
{
    Ifx_UReg_8Bit RC2:8;              /**< \brief [7:0] Reload/Capture Value [7:0] (rwh) */
} Ifx_SCR_T2_RC2L_Bits;

/** \brief Timer 2, High Byte */
typedef struct _Ifx_SCR_T2_T2H_Bits
{
    Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 Value [15:8] (rwh) */
} Ifx_SCR_T2_T2H_Bits;

/** \brief Timer 2, Low Byte */
typedef struct _Ifx_SCR_T2_T2L_Bits
{
    Ifx_UReg_8Bit THL2:8;             /**< \brief [7:0] Timer 2 Value [7:0] (rwh) */
} Ifx_SCR_T2_T2L_Bits;

/** \brief TriCore Interrupt Data Exchange Register */
typedef struct _Ifx_SCR_TCINTEXCHG_Bits
{
    Ifx_UReg_8Bit TCINT:8;            /**< \brief [7:0] Data Exchange from Main Controller to SCR (rh) */
} Ifx_SCR_TCINTEXCHG_Bits;

/** \brief Baudrate Control Register */
typedef struct _Ifx_SCR_UART_BCON_Bits
{
    Ifx_UReg_8Bit R:1;                /**< \brief [0:0] Baudrate Generator Run Control Bit (rw) */
    Ifx_UReg_8Bit BRPRE:3;            /**< \brief [3:1] Prescaler Bit (rw) */
    Ifx_UReg_8Bit BRDIS:1;            /**< \brief [4:4] Baudrate Detection Disable (rw) */
    Ifx_UReg_8Bit reserved_5:1;       /**< \brief [5:5] \internal Reserved */
    Ifx_UReg_8Bit BGSEL:2;            /**< \brief [7:6] Baudrate Select for Detection (rw) */
} Ifx_SCR_UART_BCON_Bits;

/** \brief Baudrate Timer/Reload Register, High Byte */
typedef struct _Ifx_SCR_UART_BGH_Bits
{
    Ifx_UReg_8Bit BR_VALUE:8;         /**< \brief [7:0] Baudrate Timer/Reload Value (rwh) */
} Ifx_SCR_UART_BGH_Bits;

/** \brief Baudrate Timer/Reload Register, Low Byte */
typedef struct _Ifx_SCR_UART_BGL_Bits
{
    Ifx_UReg_8Bit FD_SEL:5;           /**< \brief [4:0] Fractional Divider Selection (rw) */
    Ifx_UReg_8Bit BR_VALUE:3;         /**< \brief [7:5] Baudrate Timer/Reload Value (rwh) */
} Ifx_SCR_UART_BGL_Bits;

/** \brief LIN Status Register */
typedef struct _Ifx_SCR_UART_LINST_Bits
{
    Ifx_UReg_8Bit reserved_0:3;       /**< \brief [2:0] \internal Reserved */
    Ifx_UReg_8Bit BRK:1;              /**< \brief [3:3] Break Field Flag (rwh) */
    Ifx_UReg_8Bit EOFSYN:1;           /**< \brief [4:4] End of SYN Byte Interrupt Flag (rwh) */
    Ifx_UReg_8Bit ERRSYN:1;           /**< \brief [5:5] SYN Byte Error Interrupt Flag (rwh) */
    Ifx_UReg_8Bit SYNEN:1;            /**< \brief [6:6] End of SYN Byte and SYN Byte Error Interrupts Enable (rw) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_UART_LINST_Bits;

/** \brief Serial Data Buffer */
typedef struct _Ifx_SCR_UART_SBUF_Bits
{
    Ifx_UReg_8Bit VAL:8;              /**< \brief [7:0] Serial Interface Buffer Register (rwh) */
} Ifx_SCR_UART_SBUF_Bits;

/** \brief Serial Channel Control Register */
typedef struct _Ifx_SCR_UART_SCON_Bits
{
    Ifx_UReg_8Bit RI:1;               /**< \brief [0:0] Receive Interrupt Flag (rwh) */
    Ifx_UReg_8Bit TI:1;               /**< \brief [1:1] Transmit Interrupt Flag (rwh) */
    Ifx_UReg_8Bit RB8:1;              /**< \brief [2:2] Serial Port Receiver Bit 9 (rwh) */
    Ifx_UReg_8Bit TB8:1;              /**< \brief [3:3] Serial Port Transmitter Bit 9 (rw) */
    Ifx_UReg_8Bit REN:1;              /**< \brief [4:4] Enable Receiver of Serial Port (rw) */
    Ifx_UReg_8Bit SM2:1;              /**< \brief [5:5] Enable Serial Port Multiprocessor Communication in Modes 2 and 3 (rw) */
    Ifx_UReg_8Bit SM01:2;             /**< \brief [7:6] Serial Port Operating Mode Selection (rw) */
} Ifx_SCR_UART_SCON_Bits;

/** \brief Bit Timing Logic 1 Control Register */
typedef struct _Ifx_SCR_WCAN_BTL1_CTRL_Bits
{
    Ifx_UReg_8Bit TBIT:8;             /**< \brief [7:0] Number of Time Quanta in a Bit Time (rw) */
} Ifx_SCR_WCAN_BTL1_CTRL_Bits;

/** \brief Bit Timing Logic 2 Control Register */
typedef struct _Ifx_SCR_WCAN_BTL2_CTRL_Bits
{
    Ifx_UReg_8Bit SP:6;               /**< \brief [5:0] Sample Point Position (rw) */
    Ifx_UReg_8Bit BRP:2;              /**< \brief [7:6] Baudrate Prescaler (rw) */
} Ifx_SCR_WCAN_BTL2_CTRL_Bits;

/** \brief CDR Control Register */
typedef struct _Ifx_SCR_WCAN_CDR_CTRL_Bits
{
    Ifx_UReg_8Bit CDREN:1;            /**< \brief [0:0] Enable CDR (rw) */
    Ifx_UReg_8Bit reserved_1:1;       /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_8Bit ESF:2;              /**< \brief [3:2] Error scaling factor (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_CDR_CTRL_Bits;

/** \brief CDR Lower Limit Control Register */
typedef struct _Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits
{
    Ifx_UReg_8Bit LOWER:8;            /**< \brief [7:0] CDR Lower Limit (rw) */
} Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits;

/** \brief CDR Measured High Register */
typedef struct _Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits
{
    Ifx_UReg_8Bit HIGH:8;             /**< \brief [7:0] CDR Internally Measured High Value (rh) */
} Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits;

/** \brief CDR Measured Low Register */
typedef struct _Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits
{
    Ifx_UReg_8Bit LOW:6;              /**< \brief [5:0] CDR Internally Measured Low Value (rh) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits;

/** \brief CDR Upper Limit Control Register */
typedef struct _Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits
{
    Ifx_UReg_8Bit UPPER:8;            /**< \brief [7:0] CDR Upper Limit (rw) */
} Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits;

/** \brief Wake-Up CAN Configuration Register */
typedef struct _Ifx_SCR_WCAN_CFG_Bits
{
    Ifx_UReg_8Bit WCAN_EN:1;          /**< \brief [0:0] WCAN Enable (rw) */
    Ifx_UReg_8Bit reserved_1:1;       /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_8Bit SELWK_EN:1;         /**< \brief [2:2] Selective Wake-Up Enable (rwh) */
    Ifx_UReg_8Bit CCE:1;              /**< \brief [3:3] Configuration Change Enable (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_CFG_Bits;

/** \brief Message Data Length Code Control Register */
typedef struct _Ifx_SCR_WCAN_DLC_CTRL_Bits
{
    Ifx_UReg_8Bit DLC:4;              /**< \brief [3:0] Data Length Code (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_DLC_CTRL_Bits;

/** \brief CAN FD Control Register */
typedef struct _Ifx_SCR_WCAN_FD_CTRL_Bits
{
    Ifx_UReg_8Bit FDEN:1;             /**< \brief [0:0] CAN FD Tolerant Enable (rw) */
    Ifx_UReg_8Bit FDFILT:3;           /**< \brief [3:1] CAN FD Filter Time (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_FD_CTRL_Bits;

/** \brief Wake-Up CAN Error Counter Register */
typedef struct _Ifx_SCR_WCAN_FRMERRCNT_Bits
{
    Ifx_UReg_8Bit ECNT:6;             /**< \brief [5:0] SWK CAN Frame Error Counter (rh) */
    Ifx_UReg_8Bit FDEC_DIS:1;         /**< \brief [6:6] Error Count Disable on CAN FD Frame (rw) */
    Ifx_UReg_8Bit ECNTCLR:1;          /**< \brief [7:7] Error Counter Clear Bit (w) */
} Ifx_SCR_WCAN_FRMERRCNT_Bits;

/** \brief Message Identifier Control Register 0 */
typedef struct _Ifx_SCR_WCAN_ID0_CTRL_Bits
{
    Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN Identifier (rw) */
} Ifx_SCR_WCAN_ID0_CTRL_Bits;

/** \brief Message Identifier Control Register 1 */
typedef struct _Ifx_SCR_WCAN_ID1_CTRL_Bits
{
    Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN Identifier (rw) */
} Ifx_SCR_WCAN_ID1_CTRL_Bits;

/** \brief Message Identifier Control Register 2 */
typedef struct _Ifx_SCR_WCAN_ID2_CTRL_Bits
{
    Ifx_UReg_8Bit ID:8;               /**< \brief [7:0] CAN Identifier (rw) */
} Ifx_SCR_WCAN_ID2_CTRL_Bits;

/** \brief Message Identifier Control Register 3 */
typedef struct _Ifx_SCR_WCAN_ID3_CTRL_Bits
{
    Ifx_UReg_8Bit IDE:1;              /**< \brief [0:0] Identified Extension Bit (rw) */
    Ifx_UReg_8Bit reserved_1:1;       /**< \brief [1:1] \internal Reserved */
    Ifx_UReg_8Bit ID:5;               /**< \brief [6:2] CAN Identifier (rw) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_ID3_CTRL_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 0 */
typedef struct _Ifx_SCR_WCAN_INTESCLR0_Bits
{
    Ifx_UReg_8Bit reserved_0:2;       /**< \brief [1:0] \internal Reserved */
    Ifx_UReg_8Bit SYSERRCLR:1;        /**< \brief [2:2] CAN WUP System Error Clear Bit (w) */
    Ifx_UReg_8Bit CANTOCLR:1;         /**< \brief [3:3] CAN Time-Out Detection Clear Bit (w) */
    Ifx_UReg_8Bit ECOFLCLR:1;         /**< \brief [4:4] Error Counter Overflow Clear Bit (w) */
    Ifx_UReg_8Bit MORCCLR:1;          /**< \brief [5:5] Message Object Register Changed Clear Bit (w) */
    Ifx_UReg_8Bit ERSELCLR:1;         /**< \brief [6:6] Error Select Clear Bit (w) */
    Ifx_UReg_8Bit WUPCLR:1;           /**< \brief [7:7] WUP Clear Bit (w) */
} Ifx_SCR_WCAN_INTESCLR0_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 1 */
typedef struct _Ifx_SCR_WCAN_INTESCLR1_Bits
{
    Ifx_UReg_8Bit WUFCLR:1;           /**< \brief [0:0] Wake-up Frame Detection Flag Clear Bit (w) */
    Ifx_UReg_8Bit SYNCCLR:1;          /**< \brief [1:1] Synchronisation (at least one can frame without fail must have been received) Clear Bit (w) */
    Ifx_UReg_8Bit reserved_2:1;       /**< \brief [2:2] \internal Reserved */
    Ifx_UReg_8Bit CANSILCLR:1;        /**< \brief [3:3] CAN Silent Time during SWK Operation Clear Bit (w) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_INTESCLR1_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Register 0 */
typedef struct _Ifx_SCR_WCAN_INTESTAT0_Bits
{
    Ifx_UReg_8Bit SWACK:1;            /**< \brief [0:0] Selective Wake-Up Enable Acknowledge (rh) */
    Ifx_UReg_8Bit MODE:1;             /**< \brief [1:1] WCAN Mode of Operation (rh) */
    Ifx_UReg_8Bit SYSERR:1;           /**< \brief [2:2] CAN Wake-Up System Error (rh) */
    Ifx_UReg_8Bit CANTO:1;            /**< \brief [3:3] CAN Time-Out Detection (rh) */
    Ifx_UReg_8Bit ECOFL:1;            /**< \brief [4:4] Error Counter Overflow (rh) */
    Ifx_UReg_8Bit MORC:1;             /**< \brief [5:5] Message Object Register Changed (rh) */
    Ifx_UReg_8Bit ERSEL:1;            /**< \brief [6:6] Error Select (rh) */
    Ifx_UReg_8Bit WUP:1;              /**< \brief [7:7] Wake-Up Pattern Detected (rh) */
} Ifx_SCR_WCAN_INTESTAT0_Bits;

/** \brief Wake-Up CAN Interrupt and Event Status Register 1 */
typedef struct _Ifx_SCR_WCAN_INTESTAT1_Bits
{
    Ifx_UReg_8Bit WUF:1;              /**< \brief [0:0] Wake-Up Frame Detection (acc. ISO 11898-6) (rh) */
    Ifx_UReg_8Bit SYNC:1;             /**< \brief [1:1] Synchronisation (at least one CAN frame without fail must have been received) (rh) */
    Ifx_UReg_8Bit SWKSET:1;           /**< \brief [2:2] Selective Wake Activity (rh) */
    Ifx_UReg_8Bit CANSIL:1;           /**< \brief [3:3] CAN Bus Silent Time during Selective Wake Operation (rh) */
    Ifx_UReg_8Bit FDF:1;              /**< \brief [4:4] FD Frame Reception (rh) */
    Ifx_UReg_8Bit RXDF:1;             /**< \brief [5:5] Filtered Receive Data Input (rh) */
    Ifx_UReg_8Bit RXDS:1;             /**< \brief [6:6] Sampled Receive Data Input (rh) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_INTESTAT1_Bits;

/** \brief Wake-Up CAN Interrupt Mask Register */
typedef struct _Ifx_SCR_WCAN_INTMRSLT_Bits
{
    Ifx_UReg_8Bit CANTOMASK:1;        /**< \brief [0:0] CAN Time-Out Masking (rw) */
    Ifx_UReg_8Bit ERRMASK:1;          /**< \brief [1:1] SYSERR Masking (rw) */
    Ifx_UReg_8Bit WUFMASK:1;          /**< \brief [2:2] Wake-Up Frame Interrupt Masking (rw) */
    Ifx_UReg_8Bit WUPMASK:1;          /**< \brief [3:3] Wake-Up Pattern Detected Interrupt Masking (rw) */
    Ifx_UReg_8Bit reserved_4:4;       /**< \brief [7:4] \internal Reserved */
} Ifx_SCR_WCAN_INTMRSLT_Bits;

/** \brief Message Identifier Mask Register 0 */
typedef struct _Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits
{
    Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for Message Identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits;

/** \brief Message Identifier Mask Register 1 */
typedef struct _Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits
{
    Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for Message Identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits;

/** \brief Message Identifier Mask Register 2 */
typedef struct _Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits
{
    Ifx_UReg_8Bit MID:8;              /**< \brief [7:0] Mask for Message Identifier (rw) */
} Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits;

/** \brief Message Identifier Mask Register 3 */
typedef struct _Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits
{
    Ifx_UReg_8Bit reserved_0:2;       /**< \brief [1:0] \internal Reserved */
    Ifx_UReg_8Bit MID:5;              /**< \brief [6:2] Mask for Message Identifier (rw) */
    Ifx_UReg_8Bit reserved_7:1;       /**< \brief [7:7] \internal Reserved */
} Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits;

/** \brief Page Register for WCAN */
typedef struct _Ifx_SCR_WCAN_PAGE_Bits
{
    Ifx_UReg_8Bit PAGE:3;             /**< \brief [2:0] Page Bits (rw) */
    Ifx_UReg_8Bit reserved_3:1;       /**< \brief [3:3] \internal Reserved */
    Ifx_UReg_8Bit STNR:2;             /**< \brief [5:4] Storage Number (w) */
    Ifx_UReg_8Bit OP:2;               /**< \brief [7:6] Operation (w) */
} Ifx_SCR_WCAN_PAGE_Bits;

/** \brief Watchdog Timer Control Register */
typedef struct _Ifx_SCR_WDT_CON_Bits
{
    Ifx_UReg_8Bit WDTIN:1;            /**< \brief [0:0] Watchdog Timer Input Frequency Selection (rw) */
    Ifx_UReg_8Bit WDTRS:1;            /**< \brief [1:1] WDT Refresh Start (rwh) */
    Ifx_UReg_8Bit WDTEN:1;            /**< \brief [2:2] WDT Enable (rw) */
    Ifx_UReg_8Bit WDTCLK:1;           /**< \brief [3:3] Watchdog Timer Clock Source Selection (rw) */
    Ifx_UReg_8Bit WDTPR:1;            /**< \brief [4:4] Watchdog Prewarning Mode Flag (rh) */
    Ifx_UReg_8Bit WINBEN:1;           /**< \brief [5:5] Watchdog Window-Boundary Enable (rw) */
    Ifx_UReg_8Bit reserved_6:2;       /**< \brief [7:6] \internal Reserved */
} Ifx_SCR_WDT_CON_Bits;

/** \brief Watchdog Timer High Byte */
typedef struct _Ifx_SCR_WDT_H_Bits
{
    Ifx_UReg_8Bit WDT:8;              /**< \brief [7:0] Watchdog Timer Current Value, high byte (rh) */
} Ifx_SCR_WDT_H_Bits;

/** \brief Watchdog Timer Low Byte */
typedef struct _Ifx_SCR_WDT_L_Bits
{
    Ifx_UReg_8Bit WDT:8;              /**< \brief [7:0] Watchdog Timer Current Value, low byte (rh) */
} Ifx_SCR_WDT_L_Bits;

/** \brief Watchdog Timer Reload Register */
typedef struct _Ifx_SCR_WDT_REL_Bits
{
    Ifx_UReg_8Bit WDTREL:8;           /**< \brief [7:0] Watchdog Timer Reload Value (rw) */
} Ifx_SCR_WDT_REL_Bits;

/** \brief Watchdog Window-Boundary Register */
typedef struct _Ifx_SCR_WDT_WINB_Bits
{
    Ifx_UReg_8Bit WDTWINB:8;          /**< \brief [7:0] Watchdog Window-Boundary Value (rw) */
} Ifx_SCR_WDT_WINB_Bits;

/** \brief On-Chip XRAM Address Higher Order */
typedef struct _Ifx_SCR_XADDRH_Bits
{
    Ifx_UReg_8Bit ADDRH:8;            /**< \brief [7:0] Higher Order of On-chip XRAM Address (rw) */
} Ifx_SCR_XADDRH_Bits;

/** \}  */
/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_scr_Registers_union
 * \{   */
/** \brief Accumulator   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ACC_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_ACC;

/** \brief ADCOMP Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ADCOMP_CON_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_ADCOMP_CON;

/** \brief ADCOMP Result Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_ADCOMP_RES_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_ADCOMP_RES;

/** \brief B Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_B_Bits B;                 /**< \brief Bitfield access */
} Ifx_SCR_B;

/** \brief DATA Control Register ${n}   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DATA_CTRL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_DATA_CTRL;

/** \brief Module Suspend Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DBG_MODSUSP_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_DBG_MODSUSP;

/** \brief Data Pointer High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DPH_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_DPH;

/** \brief Data Pointer Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_DPL_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_DPL;

/** \brief Extended Operation Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EO_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_EO;

/** \brief External Interrupt Control Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EXICON0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_EXICON0;

/** \brief External Interrupt Control Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EXICON1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_EXICON1;

/** \brief External Interrupt Control Register 2   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EXICON2_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_EXICON2;

/** \brief External Interrupt Control Register 3   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_EXICON3_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_EXICON3;

/** \brief Interrupt Enable Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IEN0_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IEN0;

/** \brief Interrupt Enable Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IEN1_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IEN1;

/** \brief Page Register for Port SFRs   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IO_PAGE_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_IO_PAGE;

/** \brief Interrupt Priority Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IP_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_IP;

/** \brief Interrupt Priority 1 Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IP1_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_IP1;

/** \brief Interrupt Priority High Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IPH_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_IPH;

/** \brief Interrupt Priority 1 High Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IPH1_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_IPH1;

/** \brief Interrupt Request Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IRCON0_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_IRCON0;

/** \brief Interrupt Request Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IRCON1_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_IRCON1;

/** \brief Interrupt Request Register 2   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_IRCON2_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_IRCON2;

/** \brief Peripheral Input Select Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL0_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL0;

/** \brief Peripheral Input Select Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL1_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL1;

/** \brief Peripheral Input Select Register 2   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL2_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL2;

/** \brief Peripheral Input Select Register 3   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL3_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL3;

/** \brief Peripheral Input Select Register 4   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL4_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL4;

/** \brief Peripheral Input Select Register 5   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_MODPISEL5_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_MODPISEL5;

/** \brief NMI Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_NMICON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_NMICON;

/** \brief NMI Status Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_NMISR_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_NMISR;

/** \brief Password Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PASSWD_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_PASSWD;

/** \brief Power Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PCON_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_PCON;

/** \brief Program Status Word Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_PSW_Bits B;               /**< \brief Bitfield access */
} Ifx_SCR_PSW;

/** \brief Port P0${n} Input Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_IN_Bits B;              /**< \brief Bitfield access */
} Ifx_SCR_P_IN;

/** \brief Port P0${n} Input/Output Control Register ${k}   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_IOCR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_IOCR;

/** \brief Port P0${n} Output Modification Clear Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMCR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_OMCR;

/** \brief Port P0${n} Output Modification Set Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMSR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_OMSR;

/** \brief Port P0${n} Output Modification Toggle Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OMTR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_OMTR;

/** \brief Port P0${n} Output Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_OUT_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_P_OUT;

/** \brief Port P0${n} Pin Function Decision Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDISC_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_P_PDISC;

/** \brief Port P0${n} Pad Driver Mode 0 Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR0_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_PDR0;

/** \brief Port P0${n} Pad Driver Mode 2 Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR2_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_PDR2;

/** \brief Port P0${n} Pad Driver Mode 4 Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR4_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_PDR4;

/** \brief Port P0${n} Pad Driver Mode 6 Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_P_PDR6_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_P_PDR6;

/** \brief Count Clock Register ${n}   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CNT_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_RTC_CNT;

/** \brief Real-Time Clock Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_RTC_CON;

/** \brief Real-Time Clock Compare/Capture Register ${n}   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_RTC_CR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_RTC_CR;

/** \brief SCR Interrupt Data Exchange Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCRINTEXCHG_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_SCRINTEXCHG;

/** \brief Clock Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_CMCON_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SCU_CMCON;

/** \brief Peripheral Interrupt Enable Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_MODIEN_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_MODIEN;

/** \brief Main Reset Status Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_MRSTST_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_MRSTST;

/** \brief Page Register for SFRs   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PAGE_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_SCU_PAGE;

/** \brief Peripheral Management Control Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_PMCON1_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_PMCON1;

/** \brief Reset Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_RSTCON_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_SCU_RSTCON;

/** \brief SCR Reset Status Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_RSTST_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SCU_RSTST;

/** \brief SCU Status Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_SR_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_SCU_SR;

/** \brief Standby Mode Wake-Up Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SCU_STDBYWKP_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_SCU_STDBYWKP;

/** \brief Stack Pointer   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SP_Bits B;                /**< \brief Bitfield access */
} Ifx_SCR_SP;

/** \brief Baud Rate Timer Reload Register High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_BRH_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SSC_BRH;

/** \brief Baud Rate Timer Reload Register Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_BRL_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SSC_BRL;

/** \brief Control Register High [Operation Mode]   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONOH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONOH;

/** \brief Control Register Low [Operation Mode]   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONOL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONOL;

/** \brief Control Register High [Programming Mode]   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONPH_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONPH;

/** \brief Control Register Low [Programming Mode]   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_CONPL_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_SSC_CONPL;

/** \brief Receiver Buffer Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_RBL_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SSC_RBL;

/** \brief Transmitter Buffer Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SSC_TBL_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SSC_TBL;

/** \brief System Control Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_SYSCON0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_SYSCON0;

/** \brief Timer 0/1 Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TCON_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T01_TCON;

/** \brief Timer 0 High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TH0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T01_TH0;

/** \brief Timer 1 High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TH1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T01_TH1;

/** \brief Timer 0 Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TL0_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T01_TL0;

/** \brief Timer 1 Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TL1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T01_TL1;

/** \brief Timer Mode Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T01_TMOD_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_T01_TMOD;

/** \brief T2CCU Capture/Compare Register x High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CC02_CCXH_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CC02_CCXH;

/** \brief T2CCU Capture/Compare Register x Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CC02_CCXL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CC02_CCXL;

/** \brief T2CCU Capture/Compare Register x High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CC35_CCXH_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CC35_CCXH;

/** \brief T2CCU Capture/Compare Register x Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CC35_CCXL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CC35_CCXL;

/** \brief T2CCU Capture/Compare Enable Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCEN_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCEN;

/** \brief T2CCU Capture/Compare Time Base Select Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTBSEL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTBSEL;

/** \brief T2CCU Capture/Compare Timer Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTCON_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTCON;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTDTCH_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTDTCH;

/** \brief T2CCU Capture/Compare Timer Dead-Time Control Register Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTDTCL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTDTCL;

/** \brief T2CCU Capture/Compare Timer Register High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTH_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTH;

/** \brief T2CCU Capture/Compare Timer Register Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTL_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTL;

/** \brief T2CCU Capture/Compare Timer Reload Register High   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTRELH_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTRELH;

/** \brief T2CCU Capture/Compare Timer Reload Register Low   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_CCTRELL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_CCTRELL;

/** \brief T2CCU Compare Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_COCON_Bits B;       /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_COCON;

/** \brief T2CCU Compare Shadow Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_COSHDW_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_COSHDW;

/** \brief Page Register for T2CCU   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2CCU_PAGE_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_T2CCU_PAGE;

/** \brief Timer 2 Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_CON_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2_CON;

/** \brief Timer 2 Control Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_CON1_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T2_CON1;

/** \brief Timer 2 Mode Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_MOD_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2_MOD;

/** \brief Timer 2 Reload/Capture Register, High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_RC2H_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T2_RC2H;

/** \brief Timer 2 Reload/Capture Register, Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_RC2L_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_T2_RC2L;

/** \brief Timer 2, High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_T2H_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2_T2H;

/** \brief Timer 2, Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_T2_T2L_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_T2_T2L;

/** \brief TriCore Interrupt Data Exchange Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_TCINTEXCHG_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_TCINTEXCHG;

/** \brief Baudrate Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_BCON_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_UART_BCON;

/** \brief Baudrate Timer/Reload Register, High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_BGH_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_UART_BGH;

/** \brief Baudrate Timer/Reload Register, Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_BGL_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_UART_BGL;

/** \brief LIN Status Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_LINST_Bits B;        /**< \brief Bitfield access */
} Ifx_SCR_UART_LINST;

/** \brief Serial Data Buffer   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_SBUF_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_UART_SBUF;

/** \brief Serial Channel Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_UART_SCON_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_UART_SCON;

/** \brief Bit Timing Logic 1 Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_BTL1_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_BTL1_CTRL;

/** \brief Bit Timing Logic 2 Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_BTL2_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_BTL2_CTRL;

/** \brief CDR Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_CTRL;

/** \brief CDR Lower Limit Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_LOWER_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_LOWER_CTRL;

/** \brief CDR Measured High Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_MEAS_HIGH_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_MEAS_HIGH;

/** \brief CDR Measured Low Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_MEAS_LOW_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_MEAS_LOW;

/** \brief CDR Upper Limit Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CDR_UPPER_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CDR_UPPER_CTRL;

/** \brief Wake-Up CAN Configuration Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_CFG_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WCAN_CFG;

/** \brief Message Data Length Code Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_DLC_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_DLC_CTRL;

/** \brief CAN FD Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_FD_CTRL_Bits B;      /**< \brief Bitfield access */
} Ifx_SCR_WCAN_FD_CTRL;

/** \brief Wake-Up CAN Error Counter Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_FRMERRCNT_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_FRMERRCNT;

/** \brief Message Identifier Control Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID0_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID0_CTRL;

/** \brief Message Identifier Control Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID1_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID1_CTRL;

/** \brief Message Identifier Control Register 2   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID2_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID2_CTRL;

/** \brief Message Identifier Control Register 3   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_ID3_CTRL_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_ID3_CTRL;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESCLR0_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESCLR0;

/** \brief Wake-Up CAN Interrupt and Event Status Clear Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESCLR1_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESCLR1;

/** \brief Wake-Up CAN Interrupt and Event Status Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESTAT0_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESTAT0;

/** \brief Wake-Up CAN Interrupt and Event Status Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTESTAT1_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTESTAT1;

/** \brief Wake-Up CAN Interrupt Mask Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_INTMRSLT_Bits B;     /**< \brief Bitfield access */
} Ifx_SCR_WCAN_INTMRSLT;

/** \brief Message Identifier Mask Register 0   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID0_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID0_CTRL;

/** \brief Message Identifier Mask Register 1   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID1_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID1_CTRL;

/** \brief Message Identifier Mask Register 2   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID2_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID2_CTRL;

/** \brief Message Identifier Mask Register 3   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_MASK_ID3_CTRL_Bits B;    /**< \brief Bitfield access */
} Ifx_SCR_WCAN_MASK_ID3_CTRL;

/** \brief Page Register for WCAN   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WCAN_PAGE_Bits B;         /**< \brief Bitfield access */
} Ifx_SCR_WCAN_PAGE;

/** \brief Watchdog Timer Control Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_CON_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_WDT_CON;

/** \brief Watchdog Timer High Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_H_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_WDT_H;

/** \brief Watchdog Timer Low Byte   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_L_Bits B;             /**< \brief Bitfield access */
} Ifx_SCR_WDT_L;

/** \brief Watchdog Timer Reload Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_REL_Bits B;           /**< \brief Bitfield access */
} Ifx_SCR_WDT_REL;

/** \brief Watchdog Window-Boundary Register   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_WDT_WINB_Bits B;          /**< \brief Bitfield access */
} Ifx_SCR_WDT_WINB;

/** \brief On-Chip XRAM Address Higher Order   */
typedef union
{
    Ifx_UReg_8Bit U;                  /**< \brief Unsigned access */
    Ifx_SReg_8Bit I;                  /**< \brief Signed access */
    Ifx_SCR_XADDRH_Bits B;            /**< \brief Bitfield access */
} Ifx_SCR_XADDRH;

/** \}  */

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_P_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief P object */
typedef volatile struct _Ifx_SCR_P
{
       Ifx_SCR_P_IOCR                      IOCR[8];                /**< \brief 0, Port P0${n} Input/Output Control Register ${k}*/
       Ifx_SCR_P_PDR2                      PDR2;                   /**< \brief 1, Port P0${n} Pad Driver Mode 2 Register*/
       Ifx_SCR_P_PDR4                      PDR4;                   /**< \brief 2, Port P0${n} Pad Driver Mode 4 Register*/
       Ifx_SCR_P_PDR6                      PDR6;                   /**< \brief 3, Port P0${n} Pad Driver Mode 6 Register*/
       Ifx_SCR_P_OMTR                      OMTR;                   /**< \brief 4, Port P0${n} Output Modification Toggle Register*/
       Ifx_SCR_P_PDISC                     PDISC;                  /**< \brief 5, Port P0${n} Pin Function Decision Control Register*/
} Ifx_SCR_P;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_DATA_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief DATA object */
typedef volatile struct _Ifx_SCR_DATA
{
       Ifx_SCR_DATA_CTRL                   CTRL;                   /**< \brief 0, DATA Control Register ${n}*/
} Ifx_SCR_DATA;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_T2CCU_CC02_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief T2CCU_CC02 object */
typedef volatile struct _Ifx_SCR_T2CCU_CC02
{
       Ifx_SCR_T2CCU_CC02_CCXL             CCXL;                   /**< \brief 0, T2CCU Capture/Compare Register x Low*/
       Ifx_SCR_T2CCU_CC02_CCXH             CCXH;                   /**< \brief 1, T2CCU Capture/Compare Register x High*/
} Ifx_SCR_T2CCU_CC02;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/

/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_T2CCU_CC35_struct
 * \{  */
/******************************************************************************/
/** \name Object L1
 * \{  */
/** \brief T2CCU_CC35 object */
typedef volatile struct _Ifx_SCR_T2CCU_CC35
{
       Ifx_SCR_T2CCU_CC35_CCXL             CCXL;                   /**< \brief 0, T2CCU Capture/Compare Register x Low*/
       Ifx_SCR_T2CCU_CC35_CCXH             CCXH;                   /**< \brief 1, T2CCU Capture/Compare Register x High*/
} Ifx_SCR_T2CCU_CC35;
/** \}  */
/******************************************************************************/
/** \}  */
/******************************************************************************/
/******************************************************************************/


/******************************************************************************/
#if defined (_TASKING_)
#pragma restore
#endif
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCR_REGDEF_H */
