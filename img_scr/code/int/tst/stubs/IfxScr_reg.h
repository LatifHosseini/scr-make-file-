/**
 * \file IfxScr_reg.h
 * \brief
 * \copyright Copyright (c) 2020 Infineon Technologies AG. All rights reserved.
 *
 *
 * Version: TC3XXSCR_UM_V1.4.0.R0
 * Specification: TC3xx User Manual V1.4.0
 * MAY BE CHANGED BY USER [yes/no]: No
 *
 *                                 IMPORTANT NOTICE
 *
 *
 * Use of this file is subject to the terms of use agreed between (i) you or 
 * the company in which ordinary course of business you are acting and (ii) 
 * Infineon Technologies AG or its licensees. If and as long as no such 
 * terms of use are agreed, use of this file is subject to following:


 * Boost Software License - Version 1.0 - August 17th, 2003

 * Permission is hereby granted, free of charge, to any person or 
 * organization obtaining a copy of the software and accompanying 
 * documentation covered by this license (the "Software") to use, reproduce,
 * display, distribute, execute, and transmit the Software, and to prepare
 * derivative works of the Software, and to permit third-parties to whom the 
 * Software is furnished to do so, all subject to the following:

 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer, must
 * be included in all copies of the Software, in whole or in part, and all
 * derivative works of the Software, unless such copies or derivative works are
 * solely in the form of machine-executable object code generated by a source
 * language processor.

 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 * \defgroup IfxSfr_Scr_Registers_Cfg Scr address
 * \ingroup IfxSfr_Scr_Registers
 * 
 * \defgroup IfxSfr_Scr_Registers_Cfg_BaseAddress Base address
 * \ingroup IfxSfr_Scr_Registers_Cfg
 *
 * \defgroup IfxSfr_Scr_Registers_Cfg_Scr 2-SCR
 * \ingroup IfxSfr_Scr_Registers_Cfg
 *
 *
 */
#ifndef IFXSCR_REG_H
#define IFXSCR_REG_H 1
/******************************************************************************/
#include "IfxScr_regdef.h"
/******************************************************************************/

/******************************************************************************/

/******************************************************************************/

extern Ifx_SCR_ADCOMP_CON UT_Reg_SCR_ADCOMP_CON;
extern Ifx_SCR_ADCOMP_RES UT_Reg_SCR_ADCOMP_RES;
extern Ifx_SCR_SCU_PAGE UT_Reg_SCR_SCU_PAGE;
extern Ifx_SCR_IEN0 UT_Reg_SCR_IEN0;
extern Ifx_SCR_RTC_CR UT_Reg_SCR_RTC_CR0;
extern Ifx_SCR_RTC_CR UT_Reg_SCR_RTC_CR1;
extern Ifx_SCR_RTC_CR UT_Reg_SCR_RTC_CR2;
extern Ifx_SCR_RTC_CR UT_Reg_SCR_RTC_CR3;
extern Ifx_SCR_NMISR UT_Reg_SCR_NMISR;
extern Ifx_SCR_RTC_CON UT_Reg_SCR_RTC_CON;
extern Ifx_SCR_RTC_CNT UT_Reg_SCR_RTC_CNT0;
extern Ifx_SCR_RTC_CNT UT_Reg_SCR_RTC_CNT1;
extern Ifx_SCR_RTC_CNT UT_Reg_SCR_RTC_CNT2;
extern Ifx_SCR_RTC_CNT UT_Reg_SCR_RTC_CNT3;
extern Ifx_SCR_SCU_PMCON1 UT_Reg_SCR_SCU_PMCON1;
extern Ifx_SCR_IEN1 UT_Reg_SCR_IEN1;
extern Ifx_SCR_P_PDISC UT_Reg_SCR_P0_PDISC;
extern Ifx_SCR_P_PDISC UT_Reg_SCR_P1_PDISC;
extern Ifx_SCR_P_OUT UT_Reg_SCR_P0_OUT;
extern Ifx_SCR_P_OUT UT_Reg_SCR_P1_OUT;
extern Ifx_SCR_P_IN UT_Reg_SCR_P0_IN;
extern Ifx_SCR_P_IN UT_Reg_SCR_P1_IN;
extern Ifx_SCR_WDT_CON UT_Reg_SCR_WDT_CON;
extern Ifx_SCR_WDT_REL UT_Reg_SCR_WDT_REL;
extern Ifx_SCR_WDT_WINB UT_Reg_SCR_WDT_WINB;
extern Ifx_SCR_WDT_L UT_Reg_SCR_WDT_L;
extern Ifx_SCR_WDT_H UT_Reg_SCR_WDT_H;
extern Ifx_SCR_PASSWD UT_Reg_SCR_PASSWD;
extern Ifx_SCR_XADDRH UT_Reg_SCR_XADDRH;
extern Ifx_SCR_SYSCON0 UT_Reg_SCR_SYSCON0;
extern Ifx_SCR_SSC_CONPL UT_Reg_SCR_SSC_CONPL;
extern Ifx_SCR_SSC_CONOL UT_Reg_SCR_SSC_CONOL;
extern Ifx_SCR_SSC_CONPH UT_Reg_SCR_SSC_CONPH;
extern Ifx_SCR_SSC_CONOH UT_Reg_SCR_SSC_CONOH;
extern Ifx_SCR_SSC_TBL UT_Reg_SCR_SSC_TBL;
extern Ifx_SCR_SSC_RBL UT_Reg_SCR_SSC_RBL;
extern Ifx_SCR_SSC_BRL UT_Reg_SCR_SSC_BRL;
extern Ifx_SCR_SSC_BRH UT_Reg_SCR_SSC_BRH;
extern Ifx_SCR_IO_PAGE UT_Reg_SCR_IO_PAGE;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR0;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR1;
extern Ifx_SCR_P_PDR0 UT_Reg_SCR_P0_PDR0;
extern Ifx_SCR_P_PDR2 UT_Reg_SCR_P0_PDR2;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR2;
extern Ifx_SCR_P_OMSR UT_Reg_SCR_P0_OMSR;
extern Ifx_SCR_P_PDR4 UT_Reg_SCR_P0_PDR4;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR3;
extern Ifx_SCR_P_OMCR UT_Reg_SCR_P0_OMCR;
extern Ifx_SCR_P_PDR6 UT_Reg_SCR_P0_PDR6;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR4;
extern Ifx_SCR_P_OMTR UT_Reg_SCR_P0_OMTR;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR5;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR6;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P0_IOCR7;
extern Ifx_SCR_P_PDR0 UT_Reg_SCR_P1_PDR0;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR0;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR1;
extern Ifx_SCR_P_PDR2 UT_Reg_SCR_P1_PDR2;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR2;
extern Ifx_SCR_P_OMSR UT_Reg_SCR_P1_OMSR;
extern Ifx_SCR_P_PDR4 UT_Reg_SCR_P1_PDR4;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR3;
extern Ifx_SCR_P_OMCR UT_Reg_SCR_P1_OMCR;
extern Ifx_SCR_P_PDR6 UT_Reg_SCR_P1_PDR6;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR4;
extern Ifx_SCR_P_OMTR UT_Reg_SCR_P1_OMTR;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR5;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR6;
extern Ifx_SCR_P_IOCR UT_Reg_SCR_P1_IOCR7;
extern Ifx_SCR_WCAN_CFG UT_Reg_SCR_WCAN_CFG;
extern Ifx_SCR_WCAN_INTESTAT0 UT_Reg_SCR_WCAN_INTESTAT0;
extern Ifx_SCR_WCAN_ID0_CTRL UT_Reg_SCR_WCAN_ID0_CTRL;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA0_CTRL;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA1_CTRL;
extern Ifx_SCR_WCAN_INTMRSLT UT_Reg_SCR_WCAN_INTMRSLT;
extern Ifx_SCR_WCAN_INTESTAT1 UT_Reg_SCR_WCAN_INTESTAT1;
extern Ifx_SCR_WCAN_ID1_CTRL UT_Reg_SCR_WCAN_ID1_CTRL;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA2_CTRL;
extern Ifx_SCR_WCAN_CDR_CTRL UT_Reg_SCR_WCAN_CDR_CTRL;
extern Ifx_SCR_WCAN_FRMERRCNT UT_Reg_SCR_WCAN_FRMERRCNT;
extern Ifx_SCR_WCAN_ID2_CTRL UT_Reg_SCR_WCAN_ID2_CTRL;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA3_CTRL;
extern Ifx_SCR_WCAN_CDR_UPPER_CTRL UT_Reg_SCR_WCAN_CDR_UPPER_CTRL;
extern Ifx_SCR_WCAN_INTESCLR0 UT_Reg_SCR_WCAN_INTESCLR0;
extern Ifx_SCR_WCAN_ID3_CTRL UT_Reg_SCR_WCAN_ID3_CTRL;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA4_CTRL;
extern Ifx_SCR_WCAN_MASK_ID0_CTRL UT_Reg_SCR_WCAN_MASK_ID0_CTRL;
extern Ifx_SCR_WCAN_CDR_LOWER_CTRL UT_Reg_SCR_WCAN_CDR_LOWER_CTRL;
extern Ifx_SCR_WCAN_INTESCLR1 UT_Reg_SCR_WCAN_INTESCLR1;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA5_CTRL;
extern Ifx_SCR_WCAN_MASK_ID1_CTRL UT_Reg_SCR_WCAN_MASK_ID1_CTRL;
extern Ifx_SCR_WCAN_BTL1_CTRL UT_Reg_SCR_WCAN_BTL1_CTRL;
extern Ifx_SCR_WCAN_CDR_MEAS_HIGH UT_Reg_SCR_WCAN_CDR_MEAS_HIGH;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA6_CTRL;
extern Ifx_SCR_WCAN_MASK_ID2_CTRL UT_Reg_SCR_WCAN_MASK_ID2_CTRL;
extern Ifx_SCR_WCAN_BTL2_CTRL UT_Reg_SCR_WCAN_BTL2_CTRL;
extern Ifx_SCR_WCAN_CDR_MEAS_LOW UT_Reg_SCR_WCAN_CDR_MEAS_LOW;
extern Ifx_SCR_DATA_CTRL UT_Reg_SCR_DATA7_CTRL;
extern Ifx_SCR_WCAN_MASK_ID3_CTRL UT_Reg_SCR_WCAN_MASK_ID3_CTRL;
extern Ifx_SCR_WCAN_DLC_CTRL UT_Reg_SCR_WCAN_DLC_CTRL;
extern Ifx_SCR_WCAN_FD_CTRL UT_Reg_SCR_WCAN_FD_CTRL;
extern Ifx_SCR_WCAN_PAGE UT_Reg_SCR_WCAN_PAGE;
extern Ifx_SCR_UART_SCON UT_Reg_SCR_UART_SCON;
extern Ifx_SCR_UART_SBUF UT_Reg_SCR_UART_SBUF;
extern Ifx_SCR_UART_BGL UT_Reg_SCR_UART_BGL;
extern Ifx_SCR_UART_BCON UT_Reg_SCR_UART_BCON;
extern Ifx_SCR_UART_LINST UT_Reg_SCR_UART_LINST;
extern Ifx_SCR_UART_BGH UT_Reg_SCR_UART_BGH;
extern Ifx_SCR_T2CCU_COSHDW UT_Reg_SCR_T2CCU_COSHDW;
extern Ifx_SCR_T2_CON UT_Reg_SCR_T2_CON;
extern Ifx_SCR_T2CCU_CCEN UT_Reg_SCR_T2CCU_CCEN;
extern Ifx_SCR_T2CCU_COCON UT_Reg_SCR_T2CCU_COCON;
extern Ifx_SCR_T2CCU_CC02_CCXL UT_Reg_SCR_T2CCU_CC020_CCXL;
extern Ifx_SCR_T2CCU_CC35_CCXL UT_Reg_SCR_T2CCU_CC353_CCXL;
extern Ifx_SCR_T2CCU_CCTBSEL UT_Reg_SCR_T2CCU_CCTBSEL;
extern Ifx_SCR_T2_MOD UT_Reg_SCR_T2_MOD;
extern Ifx_SCR_T2CCU_CC02_CCXH UT_Reg_SCR_T2CCU_CC020_CCXH;
extern Ifx_SCR_T2CCU_CC35_CCXH UT_Reg_SCR_T2CCU_CC353_CCXH;
extern Ifx_SCR_T2CCU_CCTDTCL UT_Reg_SCR_T2CCU_CCTDTCL;
extern Ifx_SCR_T2CCU_CCTRELL UT_Reg_SCR_T2CCU_CCTRELL;
extern Ifx_SCR_T2_RC2L UT_Reg_SCR_T2_RC2L;
extern Ifx_SCR_T2CCU_CC02_CCXL UT_Reg_SCR_T2CCU_CC021_CCXL;
extern Ifx_SCR_T2CCU_CC35_CCXL UT_Reg_SCR_T2CCU_CC354_CCXL;
extern Ifx_SCR_T2CCU_CCTDTCH UT_Reg_SCR_T2CCU_CCTDTCH;
extern Ifx_SCR_T2CCU_CCTRELH UT_Reg_SCR_T2CCU_CCTRELH;
extern Ifx_SCR_T2_RC2H UT_Reg_SCR_T2_RC2H;
extern Ifx_SCR_T2CCU_CC02_CCXH UT_Reg_SCR_T2CCU_CC021_CCXH;
extern Ifx_SCR_T2CCU_CC35_CCXH UT_Reg_SCR_T2CCU_CC354_CCXH;
extern Ifx_SCR_T2CCU_CCTL UT_Reg_SCR_T2CCU_CCTL;
extern Ifx_SCR_T2_T2L UT_Reg_SCR_T2_T2L;
extern Ifx_SCR_T2CCU_CC02_CCXL UT_Reg_SCR_T2CCU_CC022_CCXL;
extern Ifx_SCR_T2CCU_CC35_CCXL UT_Reg_SCR_T2CCU_CC355_CCXL;
extern Ifx_SCR_T2CCU_CCTH UT_Reg_SCR_T2CCU_CCTH;
extern Ifx_SCR_T2_T2H UT_Reg_SCR_T2_T2H;
extern Ifx_SCR_T2CCU_CC02_CCXH UT_Reg_SCR_T2CCU_CC022_CCXH;
extern Ifx_SCR_T2CCU_CC35_CCXH UT_Reg_SCR_T2CCU_CC355_CCXH;
extern Ifx_SCR_T2CCU_CCTCON UT_Reg_SCR_T2CCU_CCTCON;
extern Ifx_SCR_T2_CON1 UT_Reg_SCR_T2_CON1;
extern Ifx_SCR_T2CCU_PAGE UT_Reg_SCR_T2CCU_PAGE;
extern Ifx_SCR_T01_TCON UT_Reg_SCR_T01_TCON;
extern Ifx_SCR_T01_TMOD UT_Reg_SCR_T01_TMOD;
extern Ifx_SCR_T01_TL0 UT_Reg_SCR_T01_TL0;
extern Ifx_SCR_T01_TL1 UT_Reg_SCR_T01_TL1;
extern Ifx_SCR_T01_TH0 UT_Reg_SCR_T01_TH0;
extern Ifx_SCR_T01_TH1 UT_Reg_SCR_T01_TH1;
extern Ifx_SCR_PSW UT_Reg_SCR_PSW;
extern Ifx_SCR_IPH UT_Reg_SCR_IPH;
extern Ifx_SCR_IPH1 UT_Reg_SCR_IPH1;
extern Ifx_SCR_SP UT_Reg_SCR_SP;
extern Ifx_SCR_DPL UT_Reg_SCR_DPL;
extern Ifx_SCR_DPH UT_Reg_SCR_DPH;
extern Ifx_SCR_EO UT_Reg_SCR_EO;
extern Ifx_SCR_PCON UT_Reg_SCR_PCON;
extern Ifx_SCR_B UT_Reg_SCR_B;
extern Ifx_SCR_IP1 UT_Reg_SCR_IP1;
extern Ifx_SCR_IP UT_Reg_SCR_IP;
extern Ifx_SCR_ACC UT_Reg_SCR_ACC;
extern Ifx_SCR_MODPISEL0 UT_Reg_SCR_MODPISEL0;
extern Ifx_SCR_IRCON0 UT_Reg_SCR_IRCON0;
extern Ifx_SCR_MODPISEL1 UT_Reg_SCR_MODPISEL1;
extern Ifx_SCR_IRCON1 UT_Reg_SCR_IRCON1;
extern Ifx_SCR_NMICON UT_Reg_SCR_NMICON;
extern Ifx_SCR_MODPISEL2 UT_Reg_SCR_MODPISEL2;
extern Ifx_SCR_IRCON2 UT_Reg_SCR_IRCON2;
extern Ifx_SCR_EXICON0 UT_Reg_SCR_EXICON0;
extern Ifx_SCR_SCRINTEXCHG UT_Reg_SCR_SCRINTEXCHG;
extern Ifx_SCR_MODPISEL3 UT_Reg_SCR_MODPISEL3;
extern Ifx_SCR_EXICON1 UT_Reg_SCR_EXICON1;
extern Ifx_SCR_TCINTEXCHG UT_Reg_SCR_TCINTEXCHG;
extern Ifx_SCR_MODPISEL4 UT_Reg_SCR_MODPISEL4;
extern Ifx_SCR_EXICON2 UT_Reg_SCR_EXICON2;
extern Ifx_SCR_MODPISEL5 UT_Reg_SCR_MODPISEL5;
extern Ifx_SCR_SCU_RSTST UT_Reg_SCR_SCU_RSTST;
extern Ifx_SCR_EXICON3 UT_Reg_SCR_EXICON3;
extern Ifx_SCR_SCU_MRSTST UT_Reg_SCR_SCU_MRSTST;
extern Ifx_SCR_SCU_MODIEN UT_Reg_SCR_SCU_MODIEN;
extern Ifx_SCR_DBG_MODSUSP UT_Reg_SCR_DBG_MODSUSP;
extern Ifx_SCR_SCU_SR UT_Reg_SCR_SCU_SR;
extern Ifx_SCR_SCU_RSTCON UT_Reg_SCR_SCU_RSTCON;
extern Ifx_SCR_SCU_STDBYWKP UT_Reg_SCR_SCU_STDBYWKP;
extern Ifx_SCR_SCU_CMCON UT_Reg_Ifx_SCR_SCU_CMCON;


/******************************************************************************/
/******************************************************************************/
/** \addtogroup IfxSfr_Scr_Registers_Cfg_Scr
 * \{  */
/** \brief 0, Watchdog Timer Control Register */
#define SCR_WDT_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_CON*)&UT_Reg_SCR_WDT_CON)

/** \brief 1, Watchdog Timer Reload Register */
#define SCR_WDT_REL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_REL*)&UT_Reg_SCR_WDT_REL)

/** \brief 2, Watchdog Window-Boundary Register */
#define SCR_WDT_WINB /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_WINB*)&UT_Reg_SCR_WDT_WINB)

/** \brief 3, Watchdog Timer Low Byte */
#define SCR_WDT_L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_L*)&UT_Reg_SCR_WDT_L)

/** \brief 4, Watchdog Timer High Byte */
#define SCR_WDT_H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WDT_H*)&UT_Reg_SCR_WDT_H)

/** \brief 0, Password Register */
#define SCR_PASSWD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PASSWD*)&UT_Reg_SCR_PASSWD)

/** \brief 1, On-Chip XRAM Address Higher Order */
#define SCR_XADDRH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_XADDRH*)&UT_Reg_SCR_XADDRH)

/** \brief 2, System Control Register 0 */
#define SCR_SYSCON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SYSCON0*)&UT_Reg_SCR_SYSCON0)

/** \brief 0, Control Register Low [Programming Mode] */
#define SCR_SSC_CONPL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONPL*)&UT_Reg_SCR_SSC_CONPL)

/** \brief 0, Control Register Low [Operation Mode] */
#define SCR_SSC_CONOL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONOL*)&UT_Reg_SCR_SSC_CONOL)

/** \brief 1, Control Register High [Programming Mode] */
#define SCR_SSC_CONPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONPH*)&UT_Reg_SCR_SSC_CONPH)

/** \brief 1, Control Register High [Operation Mode] */
#define SCR_SSC_CONOH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_CONOH*)&UT_Reg_SCR_SSC_CONOH)

/** \brief 2, Transmitter Buffer Register */
#define SCR_SSC_TBL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_TBL*)&UT_Reg_SCR_SSC_TBL)

/** \brief 3, Receiver Buffer Register */
#define SCR_SSC_RBL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_RBL*)&UT_Reg_SCR_SSC_RBL)

/** \brief 4, Baud Rate Timer Reload Register Low */
#define SCR_SSC_BRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_BRL*)&UT_Reg_SCR_SSC_BRL)

/** \brief 5, Baud Rate Timer Reload Register High */
#define SCR_SSC_BRH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SSC_BRH*)&UT_Reg_SCR_SSC_BRH)

/** \brief 0, Page Register for Port SFRs */
#define SCR_IO_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IO_PAGE*)&UT_Reg_SCR_IO_PAGE)

/** \brief 1, Port P00 Output Register */
#define SCR_P0_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)&UT_Reg_SCR_P0_OUT)
/** Alias (User Manual Name) for SCR_P0_OUT.
* To use register names with standard convension, please use SCR_P0_OUT.
*/
#define SCR_P00_OUT (SCR_P0_OUT)

/** \brief 1, Port P00 Input/Output Control Register 0 */
#define SCR_P0_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR0)
/** Alias (User Manual Name) for SCR_P0_IOCR0.
* To use register names with standard convension, please use SCR_P0_IOCR0.
*/
#define SCR_P00_IOCR0 (SCR_P0_IOCR0)

/** \brief 1, Port P00 Pad Driver Mode 0 Register */
#define SCR_P0_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)&UT_Reg_SCR_P0_PDR0)
/** Alias (User Manual Name) for SCR_P0_PDR0.
* To use register names with standard convension, please use SCR_P0_PDR0.
*/
#define SCR_P00_PDR0 (SCR_P0_PDR0)

/** \brief 2, Port P00 Input/Output Control Register 1 */
#define SCR_P0_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR1)
/** Alias (User Manual Name) for SCR_P0_IOCR1.
* To use register names with standard convension, please use SCR_P0_IOCR1.
*/
#define SCR_P00_IOCR1 (SCR_P0_IOCR1)

/** \brief 2, Port P00 Input Register */
#define SCR_P0_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)&UT_Reg_SCR_P0_IN)
/** Alias (User Manual Name) for SCR_P0_IN.
* To use register names with standard convension, please use SCR_P0_IN.
*/
#define SCR_P00_IN (SCR_P0_IN)

/** \brief 2, Port P00 Pad Driver Mode 2 Register */
#define SCR_P0_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)&UT_Reg_SCR_P0_PDR2)
/** Alias (User Manual Name) for SCR_P0_PDR2.
* To use register names with standard convension, please use SCR_P0_PDR2.
*/
#define SCR_P00_PDR2 (SCR_P0_PDR2)

/** \brief 3, Port P00 Input/Output Control Register 2 */
#define SCR_P0_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR2)
/** Alias (User Manual Name) for SCR_P0_IOCR2.
* To use register names with standard convension, please use SCR_P0_IOCR2.
*/
#define SCR_P00_IOCR2 (SCR_P0_IOCR2)

/** \brief 3, Port P00 Output Modification Set Register */
#define SCR_P0_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)&UT_Reg_SCR_P0_OMSR)
/** Alias (User Manual Name) for SCR_P0_OMSR.
* To use register names with standard convension, please use SCR_P0_OMSR.
*/
#define SCR_P00_OMSR (SCR_P0_OMSR)

/** \brief 3, Port P00 Pad Driver Mode 4 Register */
#define SCR_P0_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)&UT_Reg_SCR_P0_PDR4)
/** Alias (User Manual Name) for SCR_P0_PDR4.
* To use register names with standard convension, please use SCR_P0_PDR4.
*/
#define SCR_P00_PDR4 (SCR_P0_PDR4)

/** \brief 4, Port P00 Input/Output Control Register 3 */
#define SCR_P0_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR3)
/** Alias (User Manual Name) for SCR_P0_IOCR3.
* To use register names with standard convension, please use SCR_P0_IOCR3.
*/
#define SCR_P00_IOCR3 (SCR_P0_IOCR3)

/** \brief 4, Port P00 Output Modification Clear Register */
#define SCR_P0_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)&UT_Reg_SCR_P0_OMCR)
/** Alias (User Manual Name) for SCR_P0_OMCR.
* To use register names with standard convension, please use SCR_P0_OMCR.
*/
#define SCR_P00_OMCR (SCR_P0_OMCR)

/** \brief 4, Port P00 Pad Driver Mode 6 Register */
#define SCR_P0_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)&UT_Reg_SCR_P0_PDR6)
/** Alias (User Manual Name) for SCR_P0_PDR6.
* To use register names with standard convension, please use SCR_P0_PDR6.
*/
#define SCR_P00_PDR6 (SCR_P0_PDR6)

/** \brief 5, Port P00 Input/Output Control Register 4 */
#define SCR_P0_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR4)
/** Alias (User Manual Name) for SCR_P0_IOCR4.
* To use register names with standard convension, please use SCR_P0_IOCR4.
*/
#define SCR_P00_IOCR4 (SCR_P0_IOCR4)

/** \brief 5, Port P00 Output Modification Toggle Register */
#define SCR_P0_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)&UT_Reg_SCR_P0_OMTR)
/** Alias (User Manual Name) for SCR_P0_OMTR.
* To use register names with standard convension, please use SCR_P0_OMTR.
*/
#define SCR_P00_OMTR (SCR_P0_OMTR)

/** \brief 6, Port P00 Input/Output Control Register 5 */
#define SCR_P0_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR5)
/** Alias (User Manual Name) for SCR_P0_IOCR5.
* To use register names with standard convension, please use SCR_P0_IOCR5.
*/
#define SCR_P00_IOCR5 (SCR_P0_IOCR5)

/** \brief 6, Port P00 Pin Function Decision Control Register */
#define SCR_P0_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)&UT_Reg_SCR_P0_PDISC)
/** Alias (User Manual Name) for SCR_P0_PDISC.
* To use register names with standard convension, please use SCR_P0_PDISC.
*/
#define SCR_P00_PDISC (SCR_P0_PDISC)

/** \brief 7, Port P00 Input/Output Control Register 6 */
#define SCR_P0_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR6)
/** Alias (User Manual Name) for SCR_P0_IOCR6.
* To use register names with standard convension, please use SCR_P0_IOCR6.
*/
#define SCR_P00_IOCR6 (SCR_P0_IOCR6)

/** \brief 8, Port P00 Input/Output Control Register 7 */
#define SCR_P0_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P0_IOCR7)
/** Alias (User Manual Name) for SCR_P0_IOCR7.
* To use register names with standard convension, please use SCR_P0_IOCR7.
*/
#define SCR_P00_IOCR7 (SCR_P0_IOCR7)

/** \brief 9, Port P01 Output Register */
#define SCR_P1_OUT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OUT*)&UT_Reg_SCR_P1_OUT)
/** Alias (User Manual Name) for SCR_P1_OUT.
* To use register names with standard convension, please use SCR_P1_OUT.
*/
#define SCR_P01_OUT (SCR_P1_OUT)

/** \brief 9, Port P01 Input/Output Control Register 0 */
#define SCR_P1_IOCR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR0)
/** Alias (User Manual Name) for SCR_P1_IOCR0.
* To use register names with standard convension, please use SCR_P1_IOCR0.
*/
#define SCR_P01_IOCR0 (SCR_P1_IOCR0)

/** \brief 9, Port P01 Pad Driver Mode 0 Register */
#define SCR_P1_PDR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR0*)&UT_Reg_SCR_P1_PDR0)
/** Alias (User Manual Name) for SCR_P1_PDR0.
* To use register names with standard convension, please use SCR_P1_PDR0.
*/
#define SCR_P01_PDR0 (SCR_P1_PDR0)

/** \brief A, Port P01 Input/Output Control Register 1 */
#define SCR_P1_IOCR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR1)
/** Alias (User Manual Name) for SCR_P1_IOCR1.
* To use register names with standard convension, please use SCR_P1_IOCR1.
*/
#define SCR_P01_IOCR1 (SCR_P1_IOCR1)

/** \brief A, Port P01 Input Register */
#define SCR_P1_IN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IN*)&UT_Reg_SCR_P1_IN)
/** Alias (User Manual Name) for SCR_P1_IN.
* To use register names with standard convension, please use SCR_P1_IN.
*/
#define SCR_P01_IN (SCR_P1_IN)

/** \brief A, Port P01 Pad Driver Mode 2 Register */
#define SCR_P1_PDR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR2*)&UT_Reg_SCR_P1_PDR2)
/** Alias (User Manual Name) for SCR_P1_PDR2.
* To use register names with standard convension, please use SCR_P1_PDR2.
*/
#define SCR_P01_PDR2 (SCR_P1_PDR2)

/** \brief B, Port P01 Input/Output Control Register 2 */
#define SCR_P1_IOCR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR2)
/** Alias (User Manual Name) for SCR_P1_IOCR2.
* To use register names with standard convension, please use SCR_P1_IOCR2.
*/
#define SCR_P01_IOCR2 (SCR_P1_IOCR2)

/** \brief B, Port P01 Output Modification Set Register */
#define SCR_P1_OMSR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMSR*)&UT_Reg_SCR_P1_OMSR)
/** Alias (User Manual Name) for SCR_P1_OMSR.
* To use register names with standard convension, please use SCR_P1_OMSR.
*/
#define SCR_P01_OMSR (SCR_P1_OMSR)

/** \brief B, Port P01 Pad Driver Mode 4 Register */
#define SCR_P1_PDR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR4*)&UT_Reg_SCR_P1_PDR4)
/** Alias (User Manual Name) for SCR_P1_PDR4.
* To use register names with standard convension, please use SCR_P1_PDR4.
*/
#define SCR_P01_PDR4 (SCR_P1_PDR4)

/** \brief C, Port P01 Input/Output Control Register 3 */
#define SCR_P1_IOCR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR3)
/** Alias (User Manual Name) for SCR_P1_IOCR3.
* To use register names with standard convension, please use SCR_P1_IOCR3.
*/
#define SCR_P01_IOCR3 (SCR_P1_IOCR3)

/** \brief C, Port P01 Output Modification Clear Register */
#define SCR_P1_OMCR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMCR*)&UT_Reg_SCR_P1_OMCR)
/** Alias (User Manual Name) for SCR_P1_OMCR.
* To use register names with standard convension, please use SCR_P1_OMCR.
*/
#define SCR_P01_OMCR (SCR_P1_OMCR)

/** \brief C, Port P01 Pad Driver Mode 6 Register */
#define SCR_P1_PDR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDR6*)&UT_Reg_SCR_P1_PDR6)
/** Alias (User Manual Name) for SCR_P1_PDR6.
* To use register names with standard convension, please use SCR_P1_PDR6.
*/
#define SCR_P01_PDR6 (SCR_P1_PDR6)

/** \brief D, Port P01 Input/Output Control Register 4 */
#define SCR_P1_IOCR4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR4)
/** Alias (User Manual Name) for SCR_P1_IOCR4.
* To use register names with standard convension, please use SCR_P1_IOCR4.
*/
#define SCR_P01_IOCR4 (SCR_P1_IOCR4)

/** \brief D, Port P01 Output Modification Toggle Register */
#define SCR_P1_OMTR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_OMTR*)&UT_Reg_SCR_P1_OMTR)
/** Alias (User Manual Name) for SCR_P1_OMTR.
* To use register names with standard convension, please use SCR_P1_OMTR.
*/
#define SCR_P01_OMTR (SCR_P1_OMTR)

/** \brief E, Port P01 Input/Output Control Register 5 */
#define SCR_P1_IOCR5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR5)
/** Alias (User Manual Name) for SCR_P1_IOCR5.
* To use register names with standard convension, please use SCR_P1_IOCR5.
*/
#define SCR_P01_IOCR5 (SCR_P1_IOCR5)

/** \brief E, Port P01 Pin Function Decision Control Register */
#define SCR_P1_PDISC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_PDISC*)&UT_Reg_SCR_P1_PDISC)
/** Alias (User Manual Name) for SCR_P1_PDISC.
* To use register names with standard convension, please use SCR_P1_PDISC.
*/
#define SCR_P01_PDISC (SCR_P1_PDISC)

/** \brief F, Port P01 Input/Output Control Register 6 */
#define SCR_P1_IOCR6 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR6)
/** Alias (User Manual Name) for SCR_P1_IOCR6.
* To use register names with standard convension, please use SCR_P1_IOCR6.
*/
#define SCR_P01_IOCR6 (SCR_P1_IOCR6)

/** \brief 10, Port P01 Input/Output Control Register 7 */
#define SCR_P1_IOCR7 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_P_IOCR*)&UT_Reg_SCR_P1_IOCR7)
/** Alias (User Manual Name) for SCR_P1_IOCR7.
* To use register names with standard convension, please use SCR_P1_IOCR7.
*/
#define SCR_P01_IOCR7 (SCR_P1_IOCR7)

/** \brief 0, Wake-Up CAN Configuration Register */
#define SCR_WCAN_CFG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CFG*)&UT_Reg_SCR_WCAN_CFG)

/** \brief 0, Wake-Up CAN Interrupt and Event Status Register 0 */
#define SCR_WCAN_INTESTAT0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESTAT0*)&UT_Reg_SCR_WCAN_INTESTAT0)

/** \brief 0, Message Identifier Control Register 0 */
#define SCR_WCAN_ID0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID0_CTRL*)&UT_Reg_SCR_WCAN_ID0_CTRL)

/** \brief 0, DATA Control Register 0 */
#define SCR_DATA0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA0_CTRL)
/** Alias (User Manual Name) for SCR_DATA0_CTRL.
* To use register names with standard convension, please use SCR_DATA0_CTRL.
*/
#define SCR_WCAN_DATA0_CTRL (SCR_DATA0_CTRL)

/** \brief 1, DATA Control Register 1 */
#define SCR_DATA1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA1_CTRL)
/** Alias (User Manual Name) for SCR_DATA1_CTRL.
* To use register names with standard convension, please use SCR_DATA1_CTRL.
*/
#define SCR_WCAN_DATA1_CTRL (SCR_DATA1_CTRL)

/** \brief 1, Wake-Up CAN Interrupt Mask Register */
#define SCR_WCAN_INTMRSLT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTMRSLT*)&UT_Reg_SCR_WCAN_INTMRSLT)

/** \brief 1, Wake-Up CAN Interrupt and Event Status Register 1 */
#define SCR_WCAN_INTESTAT1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESTAT1*)&UT_Reg_SCR_WCAN_INTESTAT1)

/** \brief 1, Message Identifier Control Register 1 */
#define SCR_WCAN_ID1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID1_CTRL*)&UT_Reg_SCR_WCAN_ID1_CTRL)

/** \brief 2, DATA Control Register 2 */
#define SCR_DATA2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA2_CTRL)
/** Alias (User Manual Name) for SCR_DATA2_CTRL.
* To use register names with standard convension, please use SCR_DATA2_CTRL.
*/
#define SCR_WCAN_DATA2_CTRL (SCR_DATA2_CTRL)

/** \brief 2, CDR Control Register */
#define SCR_WCAN_CDR_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_CTRL*)&UT_Reg_SCR_WCAN_CDR_CTRL)

/** \brief 2, Wake-Up CAN Error Counter Register */
#define SCR_WCAN_FRMERRCNT /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_FRMERRCNT*)&UT_Reg_SCR_WCAN_FRMERRCNT)

/** \brief 2, Message Identifier Control Register 2 */
#define SCR_WCAN_ID2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID2_CTRL*)&UT_Reg_SCR_WCAN_ID2_CTRL)

/** \brief 3, DATA Control Register 3 */
#define SCR_DATA3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA3_CTRL)
/** Alias (User Manual Name) for SCR_DATA3_CTRL.
* To use register names with standard convension, please use SCR_DATA3_CTRL.
*/
#define SCR_WCAN_DATA3_CTRL (SCR_DATA3_CTRL)

/** \brief 3, CDR Upper Limit Control Register */
#define SCR_WCAN_CDR_UPPER_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_UPPER_CTRL*)&UT_Reg_SCR_WCAN_CDR_UPPER_CTRL)

/** \brief 3, Wake-Up CAN Interrupt and Event Status Clear Register 0 */
#define SCR_WCAN_INTESCLR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESCLR0*)&UT_Reg_SCR_WCAN_INTESCLR0)

/** \brief 3, Message Identifier Control Register 3 */
#define SCR_WCAN_ID3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_ID3_CTRL*)&UT_Reg_SCR_WCAN_ID3_CTRL)

/** \brief 4, DATA Control Register 4 */
#define SCR_DATA4_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA4_CTRL)
/** Alias (User Manual Name) for SCR_DATA4_CTRL.
* To use register names with standard convension, please use SCR_DATA4_CTRL.
*/
#define SCR_WCAN_DATA4_CTRL (SCR_DATA4_CTRL)

/** \brief 4, Message Identifier Mask Register 0 */
#define SCR_WCAN_MASK_ID0_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID0_CTRL*)&UT_Reg_SCR_WCAN_MASK_ID0_CTRL)

/** \brief 4, CDR Lower Limit Control Register */
#define SCR_WCAN_CDR_LOWER_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_LOWER_CTRL*)&UT_Reg_SCR_WCAN_CDR_LOWER_CTRL)

/** \brief 4, Wake-Up CAN Interrupt and Event Status Clear Register 1 */
#define SCR_WCAN_INTESCLR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_INTESCLR1*)&UT_Reg_SCR_WCAN_INTESCLR1)

/** \brief 5, DATA Control Register 5 */
#define SCR_DATA5_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA5_CTRL)
/** Alias (User Manual Name) for SCR_DATA5_CTRL.
* To use register names with standard convension, please use SCR_DATA5_CTRL.
*/
#define SCR_WCAN_DATA5_CTRL (SCR_DATA5_CTRL)

/** \brief 5, Message Identifier Mask Register 1 */
#define SCR_WCAN_MASK_ID1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID1_CTRL*)&UT_Reg_SCR_WCAN_MASK_ID1_CTRL)

/** \brief 5, Bit Timing Logic 1 Control Register */
#define SCR_WCAN_BTL1_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_BTL1_CTRL*)&UT_Reg_SCR_WCAN_BTL1_CTRL)

/** \brief 5, CDR Measured High Register */
#define SCR_WCAN_CDR_MEAS_HIGH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_MEAS_HIGH*)&UT_Reg_SCR_WCAN_CDR_MEAS_HIGH)

/** \brief 6, DATA Control Register 6 */
#define SCR_DATA6_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA6_CTRL)
/** Alias (User Manual Name) for SCR_DATA6_CTRL.
* To use register names with standard convension, please use SCR_DATA6_CTRL.
*/
#define SCR_WCAN_DATA6_CTRL (SCR_DATA6_CTRL)

/** \brief 6, Message Identifier Mask Register 2 */
#define SCR_WCAN_MASK_ID2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID2_CTRL*)&UT_Reg_SCR_WCAN_MASK_ID2_CTRL)

/** \brief 6, Bit Timing Logic 2 Control Register */
#define SCR_WCAN_BTL2_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_BTL2_CTRL*)&UT_Reg_SCR_WCAN_BTL2_CTRL)

/** \brief 6, CDR Measured Low Register */
#define SCR_WCAN_CDR_MEAS_LOW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_CDR_MEAS_LOW*)&UT_Reg_SCR_WCAN_CDR_MEAS_LOW)

/** \brief 7, DATA Control Register 7 */
#define SCR_DATA7_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DATA_CTRL*)&UT_Reg_SCR_DATA7_CTRL)
/** Alias (User Manual Name) for SCR_DATA7_CTRL.
* To use register names with standard convension, please use SCR_DATA7_CTRL.
*/
#define SCR_WCAN_DATA7_CTRL (SCR_DATA7_CTRL)

/** \brief 7, Message Identifier Mask Register 3 */
#define SCR_WCAN_MASK_ID3_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_MASK_ID3_CTRL*)&UT_Reg_SCR_WCAN_MASK_ID3_CTRL)

/** \brief 7, Message Data Length Code Control Register */
#define SCR_WCAN_DLC_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_DLC_CTRL*)&UT_Reg_SCR_WCAN_DLC_CTRL)

/** \brief 7, CAN FD Control Register */
#define SCR_WCAN_FD_CTRL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_FD_CTRL*)&UT_Reg_SCR_WCAN_FD_CTRL)

/** \brief 8, Page Register for WCAN */
#define SCR_WCAN_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_WCAN_PAGE*)&UT_Reg_SCR_WCAN_PAGE)

/** \brief 0, Serial Channel Control Register */
#define SCR_UART_SCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_SCON*)&UT_Reg_SCR_UART_SCON)

/** \brief 1, Serial Data Buffer */
#define SCR_UART_SBUF /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_SBUF*)&UT_Reg_SCR_UART_SBUF)

/** \brief 0, Baudrate Timer/Reload Register, Low Byte */
#define SCR_UART_BGL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_BGL*)&UT_Reg_SCR_UART_BGL)

/** \brief 1, Baudrate Control Register */
#define SCR_UART_BCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_BCON*)&UT_Reg_SCR_UART_BCON)

/** \brief 2, LIN Status Register */
#define SCR_UART_LINST /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_LINST*)&UT_Reg_SCR_UART_LINST)

/** \brief 3, Baudrate Timer/Reload Register, High Byte */
#define SCR_UART_BGH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_UART_BGH*)&UT_Reg_SCR_UART_BGH)

/** \brief 0, T2CCU Compare Shadow Register */
#define SCR_T2CCU_COSHDW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_COSHDW*)&UT_Reg_SCR_T2CCU_COSHDW)

/** \brief 0, Timer 2 Control Register */
#define SCR_T2_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_CON*)&UT_Reg_SCR_T2_CON)

/** \brief 0, T2CCU Capture/Compare Enable Register */
#define SCR_T2CCU_CCEN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCEN*)&UT_Reg_SCR_T2CCU_CCEN)

/** \brief 0, T2CCU Compare Control Register */
#define SCR_T2CCU_COCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_COCON*)&UT_Reg_SCR_T2CCU_COCON)

/** \brief 1, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC020_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXL*)&UT_Reg_SCR_T2CCU_CC020_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC020_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC020_CCXL.
*/
#define SCR_T2CCU_CC0L (SCR_T2CCU_CC020_CCXL)

/** \brief 1, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC353_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXL*)&UT_Reg_SCR_T2CCU_CC353_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC353_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC353_CCXL.
*/
#define SCR_T2CCU_CC3L (SCR_T2CCU_CC353_CCXL)

/** \brief 1, T2CCU Capture/Compare Time Base Select Register */
#define SCR_T2CCU_CCTBSEL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTBSEL*)&UT_Reg_SCR_T2CCU_CCTBSEL)

/** \brief 1, Timer 2 Mode Register */
#define SCR_T2_MOD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_MOD*)&UT_Reg_SCR_T2_MOD)

/** \brief 2, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC020_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXH*)&UT_Reg_SCR_T2CCU_CC020_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC020_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC020_CCXH.
*/
#define SCR_T2CCU_CC0H (SCR_T2CCU_CC020_CCXH)

/** \brief 2, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC353_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXH*)&UT_Reg_SCR_T2CCU_CC353_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC353_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC353_CCXH.
*/
#define SCR_T2CCU_CC3H (SCR_T2CCU_CC353_CCXH)

/** \brief 2, T2CCU Capture/Compare Timer Dead-Time Control Register Low */
#define SCR_T2CCU_CCTDTCL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTDTCL*)&UT_Reg_SCR_T2CCU_CCTDTCL)

/** \brief 2, T2CCU Capture/Compare Timer Reload Register Low */
#define SCR_T2CCU_CCTRELL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTRELL*)&UT_Reg_SCR_T2CCU_CCTRELL)

/** \brief 2, Timer 2 Reload/Capture Register, Low Byte */
#define SCR_T2_RC2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_RC2L*)&UT_Reg_SCR_T2_RC2L)

/** \brief 3, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC021_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXL*)&UT_Reg_SCR_T2CCU_CC021_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC021_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC021_CCXL.
*/
#define SCR_T2CCU_CC1L (SCR_T2CCU_CC021_CCXL)

/** \brief 3, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC354_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXL*)&UT_Reg_SCR_T2CCU_CC354_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC354_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC354_CCXL.
*/
#define SCR_T2CCU_CC4L (SCR_T2CCU_CC354_CCXL)

/** \brief 3, T2CCU Capture/Compare Timer Dead-Time Control Register High */
#define SCR_T2CCU_CCTDTCH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTDTCH*)&UT_Reg_SCR_T2CCU_CCTDTCH)

/** \brief 3, T2CCU Capture/Compare Timer Reload Register High */
#define SCR_T2CCU_CCTRELH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTRELH*)&UT_Reg_SCR_T2CCU_CCTRELH)

/** \brief 3, Timer 2 Reload/Capture Register, High Byte */
#define SCR_T2_RC2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_RC2H*)&UT_Reg_SCR_T2_RC2H)

/** \brief 4, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC021_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXH*)&UT_Reg_SCR_T2CCU_CC021_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC021_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC021_CCXH.
*/
#define SCR_T2CCU_CC1H (SCR_T2CCU_CC021_CCXH)

/** \brief 4, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC354_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXH*)&UT_Reg_SCR_T2CCU_CC354_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC354_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC354_CCXH.
*/
#define SCR_T2CCU_CC4H (SCR_T2CCU_CC354_CCXH)

/** \brief 4, T2CCU Capture/Compare Timer Register Low */
#define SCR_T2CCU_CCTL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTL*)&UT_Reg_SCR_T2CCU_CCTL)

/** \brief 4, Timer 2, Low Byte */
#define SCR_T2_T2L /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_T2L*)&UT_Reg_SCR_T2_T2L)

/** \brief 5, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC022_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXL*)&UT_Reg_SCR_T2CCU_CC022_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC022_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC022_CCXL.
*/
#define SCR_T2CCU_CC2L (SCR_T2CCU_CC022_CCXL)

/** \brief 5, T2CCU Capture/Compare Register x Low */
#define SCR_T2CCU_CC355_CCXL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXL*)&UT_Reg_SCR_T2CCU_CC355_CCXL)
/** Alias (User Manual Name) for SCR_T2CCU_CC355_CCXL.
* To use register names with standard convension, please use SCR_T2CCU_CC355_CCXL.
*/
#define SCR_T2CCU_CC5L (SCR_T2CCU_CC355_CCXL)

/** \brief 5, T2CCU Capture/Compare Timer Register High */
#define SCR_T2CCU_CCTH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTH*)&UT_Reg_SCR_T2CCU_CCTH)

/** \brief 5, Timer 2, High Byte */
#define SCR_T2_T2H /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_T2H*)&UT_Reg_SCR_T2_T2H)

/** \brief 6, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC022_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC02_CCXH*)&UT_Reg_SCR_T2CCU_CC022_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC022_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC022_CCXH.
*/
#define SCR_T2CCU_CC2H (SCR_T2CCU_CC022_CCXH)

/** \brief 6, T2CCU Capture/Compare Register x High */
#define SCR_T2CCU_CC355_CCXH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CC35_CCXH*)&UT_Reg_SCR_T2CCU_CC355_CCXH)
/** Alias (User Manual Name) for SCR_T2CCU_CC355_CCXH.
* To use register names with standard convension, please use SCR_T2CCU_CC355_CCXH.
*/
#define SCR_T2CCU_CC5H (SCR_T2CCU_CC355_CCXH)

/** \brief 6, T2CCU Capture/Compare Timer Control Register */
#define SCR_T2CCU_CCTCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_CCTCON*)&UT_Reg_SCR_T2CCU_CCTCON)

/** \brief 6, Timer 2 Control Register 1 */
#define SCR_T2_CON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2_CON1*)&UT_Reg_SCR_T2_CON1)

/** \brief 7, Page Register for T2CCU */
#define SCR_T2CCU_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T2CCU_PAGE*)&UT_Reg_SCR_T2CCU_PAGE)

/** \brief 0, Timer 0/1 Control Register */
#define SCR_T01_TCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TCON*)&UT_Reg_SCR_T01_TCON)

/** \brief 1, Timer Mode Register */
#define SCR_T01_TMOD /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TMOD*)&UT_Reg_SCR_T01_TMOD)

/** \brief 2, Timer 0 Low Byte */
#define SCR_T01_TL0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TL0*)&UT_Reg_SCR_T01_TL0)

/** \brief 3, Timer 1 Low Byte */
#define SCR_T01_TL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TL1*)&UT_Reg_SCR_T01_TL1)

/** \brief 4, Timer 0 High Byte */
#define SCR_T01_TH0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TH0*)&UT_Reg_SCR_T01_TH0)

/** \brief 5, Timer 1 High Byte */
#define SCR_T01_TH1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_T01_TH1*)&UT_Reg_SCR_T01_TH1)

/** \brief 7, Program Status Word Register */
#define SCR_PSW /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PSW*)&UT_Reg_SCR_PSW)

/** \brief 8, Interrupt Enable Register 1 */
#define SCR_IEN1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IEN1*)&UT_Reg_SCR_IEN1)

/** \brief 9, Interrupt Priority High Register */
#define SCR_IPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IPH*)&UT_Reg_SCR_IPH)

/** \brief A, Interrupt Priority 1 High Register */
#define SCR_IPH1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IPH1*)&UT_Reg_SCR_IPH1)

/** \brief B, Stack Pointer */
#define SCR_SP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SP*)&UT_Reg_SCR_SP)

/** \brief C, Data Pointer Low Byte */
#define SCR_DPL /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DPL*)&UT_Reg_SCR_DPL)

/** \brief D, Data Pointer High Byte */
#define SCR_DPH /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DPH*)&UT_Reg_SCR_DPH)

/** \brief E, Extended Operation Register */
#define SCR_EO /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EO*)&UT_Reg_SCR_EO)

/** \brief F, Interrupt Enable Register 0 */
#define SCR_IEN0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IEN0*)&UT_Reg_SCR_IEN0)

/** \brief 10, Power Control Register */
#define SCR_PCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_PCON*)&UT_Reg_SCR_PCON)

/** \brief 11, B Register */
#define SCR_B /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_B*)&UT_Reg_SCR_B)

/** \brief 12, Interrupt Priority 1 Register */
#define SCR_IP1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IP1*)&UT_Reg_SCR_IP1)

/** \brief 13, Interrupt Priority Register */
#define SCR_IP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IP*)&UT_Reg_SCR_IP)

/** \brief 17, Accumulator */
#define SCR_ACC /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ACC*)&UT_Reg_SCR_ACC)

/** \brief 0, Real-Time Clock Control Register */
#define SCR_RTC_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CON*)&UT_Reg_SCR_RTC_CON)

/** \brief 1, Count Clock Register 0 */
#define SCR_RTC_CNT0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)&UT_Reg_SCR_RTC_CNT0)

/** \brief 2, Count Clock Register 1 */
#define SCR_RTC_CNT1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)&UT_Reg_SCR_RTC_CNT1)

/** \brief 3, Count Clock Register 2 */
#define SCR_RTC_CNT2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)&UT_Reg_SCR_RTC_CNT2)

/** \brief 4, Count Clock Register 3 */
#define SCR_RTC_CNT3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CNT*)&UT_Reg_SCR_RTC_CNT3)

/** \brief 5, Real-Time Clock Compare/Capture Register 0 */
#define SCR_RTC_CR0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)&UT_Reg_SCR_RTC_CR0)

/** \brief 6, Real-Time Clock Compare/Capture Register 1 */
#define SCR_RTC_CR1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)&UT_Reg_SCR_RTC_CR1)

/** \brief 7, Real-Time Clock Compare/Capture Register 2 */
#define SCR_RTC_CR2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)&UT_Reg_SCR_RTC_CR2)

/** \brief 8, Real-Time Clock Compare/Capture Register 3 */
#define SCR_RTC_CR3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_RTC_CR*)&UT_Reg_SCR_RTC_CR3)

/** \brief 0, Page Register for SFRs */
#define SCR_SCU_PAGE /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PAGE*)&UT_Reg_SCR_SCU_PAGE)

/** \brief 1, Peripheral Input Select Register 0 */
#define SCR_MODPISEL0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL0*)&UT_Reg_SCR_MODPISEL0)

/** \brief 1, Interrupt Request Register 0 */
#define SCR_IRCON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IRCON0*)&UT_Reg_SCR_IRCON0)

/** \brief 1, NMI Status Register */
#define SCR_NMISR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_NMISR*)&UT_Reg_SCR_NMISR)

/** \brief 2, Peripheral Input Select Register 1 */
#define SCR_MODPISEL1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL1*)&UT_Reg_SCR_MODPISEL1)

/** \brief 2, Interrupt Request Register 1 */
#define SCR_IRCON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IRCON1*)&UT_Reg_SCR_IRCON1)

/** \brief 2, NMI Control Register */
#define SCR_NMICON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_NMICON*)&UT_Reg_SCR_NMICON)

/** \brief 3, Peripheral Input Select Register 2 */
#define SCR_MODPISEL2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL2*)&UT_Reg_SCR_MODPISEL2)

/** \brief 3, Interrupt Request Register 2 */
#define SCR_IRCON2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_IRCON2*)&UT_Reg_SCR_IRCON2)

/** \brief 3, External Interrupt Control Register 0 */
#define SCR_EXICON0 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EXICON0*)&UT_Reg_SCR_EXICON0)

/** \brief 4, SCR Interrupt Data Exchange Register */
#define SCR_SCRINTEXCHG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCRINTEXCHG*)&UT_Reg_SCR_SCRINTEXCHG)

/** \brief 4, Peripheral Input Select Register 3 */
#define SCR_MODPISEL3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL3*)&UT_Reg_SCR_MODPISEL3)

/** \brief 4, External Interrupt Control Register 1 */
#define SCR_EXICON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EXICON1*)&UT_Reg_SCR_EXICON1)

/** \brief 5, TriCore Interrupt Data Exchange Register */
#define SCR_TCINTEXCHG /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_TCINTEXCHG*)&UT_Reg_SCR_TCINTEXCHG)

/** \brief 5, Peripheral Input Select Register 4 */
#define SCR_MODPISEL4 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL4*)&UT_Reg_SCR_MODPISEL4)

/** \brief 5, External Interrupt Control Register 2 */
#define SCR_EXICON2 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EXICON2*)&UT_Reg_SCR_EXICON2)

/** \brief 6, Peripheral Input Select Register 5 */
#define SCR_MODPISEL5 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_MODPISEL5*)&UT_Reg_SCR_MODPISEL5)

/** \brief 6, SCR Reset Status Register */
#define SCR_SCU_RSTST /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_RSTST*)&UT_Reg_SCR_SCU_RSTST)

/** \brief 6, External Interrupt Control Register 3 */
#define SCR_EXICON3 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_EXICON3*)&UT_Reg_SCR_EXICON3)

/** \brief 7, Main Reset Status Register */
#define SCR_SCU_MRSTST /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_MRSTST*)&UT_Reg_SCR_SCU_MRSTST)

/** \brief 7, Peripheral Interrupt Enable Register */
#define SCR_SCU_MODIEN /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_MODIEN*)&UT_Reg_SCR_SCU_MODIEN)

/** \brief 8, Module Suspend Control Register */
#define SCR_DBG_MODSUSP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_DBG_MODSUSP*)&UT_Reg_SCR_DBG_MODSUSP)

/** \brief 8, SCU Status Register */
#define SCR_SCU_SR /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_SR*)&UT_Reg_SCR_SCU_SR)

/** \brief 8, Reset Control Register */
#define SCR_SCU_RSTCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_RSTCON*)&UT_Reg_SCR_SCU_RSTCON)

/** \brief 9, ADCOMP Result Register */
#define SCR_ADCOMP_RES /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ADCOMP_RES*)&UT_Reg_SCR_ADCOMP_RES)

/** \brief 9, Clock Control Register */
#define SCR_SCU_CMCON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_CMCON*)&UT_Reg_Ifx_SCR_SCU_CMCON)

/** \brief A, ADCOMP Control Register */
#define SCR_ADCOMP_CON /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_ADCOMP_CON*)&UT_Reg_SCR_ADCOMP_CON)

/** \brief A, Peripheral Management Control Register 1 */
#define SCR_SCU_PMCON1 /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_PMCON1*)&UT_Reg_SCR_SCU_PMCON1)

/** \brief B, Standby Mode Wake-Up Register */
#define SCR_SCU_STDBYWKP /*lint --e(923, 9078)*/ (*(volatile Ifx_SCR_SCU_STDBYWKP*)&UT_Reg_SCR_SCU_STDBYWKP)


/** \}  */

/******************************************************************************/

/******************************************************************************/

#endif /* IFXSCR_REG_H */
