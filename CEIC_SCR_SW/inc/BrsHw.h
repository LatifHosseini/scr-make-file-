
/**********************************************************************************************************************
  COPYRIGHT
-----------------------------------------------------------------------------------------------------------------------
  \par      copyright
  \verbatim
  Copyright (c) 2020 by Vector Informatik GmbH.                                                  All rights reserved.

                This software is copyright protected and proprietary to Vector Informatik GmbH.
                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
                All other rights remain with Vector Informatik GmbH.
  \endverbatim
-----------------------------------------------------------------------------------------------------------------------
  FILE DESCRIPTION
-----------------------------------------------------------------------------------------------------------------------
  \file  File:  BrsHw.h
      Project:  Vector Basic Runtime System
       Module:  BrsHw for platform Infineon Xc800

  \brief Description:  This is the hardware specific header file for Vector Basic Runtime System (BRS).
                       This file supports: Keil compiler, Tasking compiler, XC800 family

  \attention Please note:
    The demo and example programs only show special aspects of the software. With regard to the fact
    that these programs are meant for demonstration purposes only, Vector Informatik liability shall be
    expressly excluded in cases of ordinary negligence, to the extent admissible by law or statute.
**********************************************************************************************************************/

#ifndef _BRSHW_H_
#define _BRSHW_H_

/**********************************************************************************************************************
  INCLUDES
**********************************************************************************************************************/
/*
 * Description: The BrsCfg header is used to configure different types of
 *              tests and system setups. Therefore it must be included first
 *              in each BRS and test module.
 *              This file is part of the BRS.
 */
#include "BrsCfg.h"

#if !defined (BASIC_RUNTIME_SYSTEM_TYPE_MSR4)
  /*
   * Description: The v_cfg header is generated by the generation tool. It contains
   *              a list of currently used CANbedded/MSR3 modules (VGEN_ENABLE_*).
   *              For MSR4, this list is contained within VGenEnableSwitches.h of
   *              zBrs_AsrEmbeddedRunTimeSystemCfg5, included via BrsCfg.h.
   */
  #include "v_cfg.h"

  /*
   * Description: BrsTypes header is the abstraction for MSR/CBD to get access to type definitions
   */
  #include "BrsTypes.h"
#else
  /*
   * Description: Std_Types header provides all Standard Types within ASR-stacks
   */
  #include "Std_Types.h"
#endif /*BASIC_RUNTIME_SYSTEM_TYPE_MSR4*/

/**********************************************************************************************************************
  MODULE VERSION
**********************************************************************************************************************/
/*
 * Description: The version numbers are BCD coded.
 *              E.g. a main version of 1.23 is coded with 0x0123, a bug fix version of 9 is coded 0x09.
 */

/* This is the BrsHw template main and bug fix version, the platform BrsHw is reviewed to */
#define BRSHW_SOURCECODE_TEMPLATE_VERSION        0x0202u
#define BRSHW_SOURCECODE_TEMPLATE_BUGFIX_VERSION 0x04u

/* This is the BrsHw main and bug fix version */
#define BRSHW_VERSION        0x0200u
#define BRSHW_BUGFIX_VERSION 0x00u

/**********************************************************************************************************************
  GLOBAL CONSTANT MACROS
**********************************************************************************************************************/
/*
 * Description: Macro for access to IO addresses
 */
#define BRSHW_IOS(type, address) (*((volatile type *)(address)))
#define __INTNO(nr) ((8*nr)+3) /* Use number instead of vector address */

/**********************************************************************************************************************
  BrsHW configuration
**********************************************************************************************************************/
#if defined (BRS_OS_USECASE_BRS)
# if !defined (BRS_ENABLE_FBL_SUPPORT)
  #define BRSHW_ENABLE_TIMER_INTERRUPT
# endif
#endif

/*
 * Description: Standard access to the supported LED. Values with a fix name should
 *              never be used for other purposes.
 */
#define BRSHW_LED_SYSTEM_OK  0 /* Stub to call of BrsHwSetLed() */

/*
 * Description: On and Off value for argument 'NewState' in BrsHwSetLed.
 */
#define BRSHW_LED_ON   (uint8)0
#define BRSHW_LED_OFF  (uint8)1
/**********************************************************************************************************************
  Global variables
**********************************************************************************************************************/

/**********************************************************************************************************************
  Global const variables
**********************************************************************************************************************/
/*
 * Description: These constants are used to propagate the Versions over module boundaries.
 *              The version numbers are BCD coded. E.g. a sub version of 23 is coded with 0x23,
 *              a bug fix version of 9 is coded 0x09.
 */
extern uint8 const kBrsHwMainVersion;
extern uint8 const kBrsHwSubVersion;
extern uint8 const kBrsHwBugfixVersion;

/**********************************************************************************************************************
  Global function prototypes
**********************************************************************************************************************/

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the Watchdog.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwWatchdogInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the PLL.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPllInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the used ports.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain or EcuM at power on initialization
 */
/*****************************************************************************/
void BrsHwPortInitPowerOn(void);

/* Wrapper from old BrsHwEvaBoardInitPowerOn() function to nothing. Done within BrsHwPortInitPowerOn() now. */
#define BrsHwEvaBoardInitPowerOn()

/*****************************************************************************/
/**
 * @brief      Programmable Interrupt Timer, Timer initialization for 'FakeOS'
 *             1ms time base generation
 * @pre        Interrupt vector must be correct configured and the ISR
 *             function itself should exist.
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization.
 */
/*****************************************************************************/
void BrsHwTimeBaseInitPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Timer interrupt for the 'FakeOS' 1ms time base generation.
 *             This ISR function is not necessary if an OS is used!
 * @pre        Interrupt vector must be correct configured and the ISR
 *             function itself should exist.
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from interrupt vector table if the assigned
 *             timer has set its interrupt flag.
 */
/*****************************************************************************/
/* void BrsHwTimeBaseInterrupt(void); not needed for that platform, as no int table */

/*****************************************************************************/
/**
 * @brief      Disable the global system interrupt and initialize the INT
 *             lock handler variables.
 * @pre        Must be the first function call in main@BrsMain
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwDisableInterruptAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Enable the global system interrupt the first time
 * @pre        Must be called after all initializations are done
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from main@BrsMain at power on initialization
 */
/*****************************************************************************/
void BrsHwEnableInterruptAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      This function has to be used to initialize the used interrupts.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from BrsHwEnableInterruptAtPowerOn or EcuM-DriverInitThree
 */
/*****************************************************************************/
void BrsHwConfigureInterruptsAtPowerOn(void);

/*****************************************************************************/
/**
 * @brief      Disables the global interrupt of the micro. This is done in a
 *             "save way" to allow also nested calls of BrsHwDisableInterrupt
 *             and BrsHwRestoreInterrupt. The first call of BrsHwDisableInterrupt
 *             stores the current state of the global INT flag and the last
 *             call to BrsHwRestoreInterrupt restores the state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to disable the global interrupt
 */
/*****************************************************************************/
void BrsHwDisableInterrupt(void);

/*****************************************************************************/
/**
 * @brief      Restores the state of the global interrupt of the micro. This
 *             is done in a "save way" to allow also nested calls of
 *             BrsHwDisableInterrupt and BrsHwRestoreInterrupt. The first call
 *             of BrsHwDisableInterrupt stores the current state of the global
 *             INT flag and the last call to BrsHwRestoreInterrupt restores the
 *             state.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from all modules to enable the global interrupt
 */
/*****************************************************************************/
void BrsHwRestoreInterrupt(void);

/*****************************************************************************/
/**
 * @brief      restart ECU (issue a software reset or jump to startup code)
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from e.g. ECU state handling
 */
/*****************************************************************************/
void BrsHwSoftwareResetECU(void);

/*******************************************************************************
 * NAME          : BrsHwSetLed
 * CALLED BY     : All modules to set or clear a LED
 * PRECONDITIONS : none
 * PARAMETERS    : none
 * RETURN VALUE  : none
 * DESCRIPTION   : Up to 8 LEDs are supported by the BRS.
 *                 Please note, that not every EVA hardware supports LEDs and due
 *                 to this do not use this feature for a general test case!
 ********************************************************************************/
void BrsHwSetLed(
    /*
     *  Description        : Number of the LED to be handled
     *  Direction          : in
     *  Modified           : no
     *  Val. range / Coding: 0..7
     */
    uint8 LedNumber,
    /*
     *  Description        : New state of the LED
     *  Direction          : in
     *  Modified           : no
     *  Val. range / Coding: BRSHW_LED_ON, BRSHW_LED_OFF
     */
    uint8 NewState
);

/*****************************************************************************/
/**
 * @brief      This API is used for the BRS time measurement support to get a
 *             default time value for all measurements with this platform to
 *             be able to compare time measurements on different dates based
 *             on this time result.
 * @pre        -
 * @param[in]  -
 * @param[out] -
 * @return     -
 * @context    Function is called from TimeMeasurement
 */
/*****************************************************************************/
void BrsHwTime100NOP(void);

#endif /*_BRSHW_H_*/
